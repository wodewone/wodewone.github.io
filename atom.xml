<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>wodewone&#39;s blog</title>
  <subtitle>梦想是主题，生活才是题主</subtitle>
  <link href="/atom.xml" rel="self"/>
  
  <link href="http://wodewone.com/"/>
  <updated>2017-04-05T03:31:21.000Z</updated>
  <id>http://wodewone.com/</id>
  
  <author>
    <name>Coco</name>
    
  </author>
  
  <generator uri="http://hexo.io/">Hexo</generator>
  
  <entry>
    <title>关于OOP的SOLID原则</title>
    <link href="http://wodewone.com/2017/04/05/%E5%85%B3%E4%BA%8EOOP%E7%9A%84SOLID%E5%8E%9F%E5%88%99/"/>
    <id>http://wodewone.com/2017/04/05/关于OOP的SOLID原则/</id>
    <published>2017-04-05T03:23:49.000Z</published>
    <updated>2017-04-05T03:31:21.000Z</updated>
    
    <content type="html"><![CDATA[<blockquote>
<ul>
<li>原文地址：<a href="https://android.jlelse.eu/solid-principles-the-definitive-guide-75e30a284dea#.8b78yjtyk" target="_blank" rel="external">SOLID Principles : The Definitive Guide</a></li>
<li>原文作者：<a href="https://android.jlelse.eu/@aantunesdias" target="_blank" rel="external">Arthur Antunes</a></li>
<li>译文出自：<a href="https://github.com/xitu/gold-miner" target="_blank" rel="external">掘金翻译计划</a></li>
<li>译者：<a href="https://github.com/XHShirley" target="_blank" rel="external">XHShirley</a> * 校对者：<a href="https://github.com/imink" target="_blank" rel="external">Patrick Wang</a>, <a href="https://github.com/skyar2009" target="_blank" rel="external">skyar2009</a></li>
<li>本文原址：<a href="https://github.com/xitu/gold-miner/blob/master/TODO/solid-principles-the-definitive-guide.md" target="_blank" rel="external">[译] SOLID 原则：权威指南</a></li>
</ul>
</blockquote>
<h1 id="SOLID-原则：权威指南"><a href="#SOLID-原则：权威指南" class="headerlink" title="SOLID 原则：权威指南"></a>SOLID 原则：权威指南</h1><p><img src="https://cdn-images-1.medium.com/max/2000/1*LcsyJRuNmvg31Va1M2OZgA.png" alt=""></p>
<p><strong>SOLID</strong> 是五个面向对象编程的重要原则的缩写。另外，它也是每个开发者必备的基本知识。了解并应用这些原则能<strong>让你写出更优质的代码</strong>，变成更优秀的开发者。</p>
<p>SOLID 原则是由 <a href="https://en.wikipedia.org/wiki/Robert_Cecil_Martin" target="_blank" rel="external">Robert C. Martin （Bob 大叔）</a> 在 21 世纪初定义的。Bob 大叔阐述了几个并且确认了其它已经存在的原则。他说我们应该使用这些原则，让代码获得好的依赖管理。</p>
<p>但是，SOLID 原则在最初并没有被大家熟知直到 <a href="https://michaelfeathers.silvrback.com/" target="_blank" rel="external">Michael Feathers</a> 观察到这些原则的首字母正好能拼成缩写 SOLID，这个非常具有代表性的名字。</p>
<p>当应用在我们的代码里面的时候，这组实用的建议可以帮助我们获得以下的好处：</p>
<ul>
<li>可持续性</li>
<li>扩展性</li>
<li>鲁棒的代码</li>
</ul>
<p>但在我们了解每个 SOLID 原则之前， 我们需要回忆<strong>软件开发中两个相关的概念</strong>。<strong>耦合</strong>和<strong>内聚</strong>：</p>
<h4 id="耦合："><a href="#耦合：" class="headerlink" title="耦合："></a>耦合：</h4><p>我们可以把它定义为<strong>一个类、方法或者任何一个实体直接与另一个实体连接的度</strong>。这个耦合的度也可以被看作依赖的度。</p>
<ul>
<li><strong>例子：</strong>当我们想要使用的一个类，与一个或者多个类紧密地绑定在一起（高耦合），我们将最终使用或修改这些类我们所依赖的部分。</li>
</ul>
<h4 id="内聚："><a href="#内聚：" class="headerlink" title="内聚："></a>内聚：</h4><p>内聚是一个系统里两个或多个部分一起执行工作的度量，来获得比每个部分单独工作获得更好的结果。</p>
<ul>
<li><strong>例子：</strong> 星球大战中 Han Solo 和 Chewbacca 一起在千年隼号里。</li>
</ul>
<p><strong>想要有一个高质量的软件，我们必须尝试低耦合高内聚，</strong>而 SOLID 原则正好帮助我们完成这个任务。如果我们遵循这些指引，我们的代码会更健壮，更易于维护，有更高的复用性和可扩展性。同时，可以避免每次变更都要修改多处代码的问题。</p>
<p>让我们把 SOLID 的字母拆开看看每一个对应原则的细节吧。</p>
<p><img src="https://cdn-images-1.medium.com/max/800/1*ykdDqm06KRI1XDtv34b2BQ.png" alt=""></p>
<h3 id="单一职责原则（SRP）："><a href="#单一职责原则（SRP）：" class="headerlink" title="单一职责原则（SRP）："></a>单一职责原则（SRP）：</h3><blockquote>
<p><strong>一个类应该只有一个引起改变的原因。</strong></p>
</blockquote>
<p>这个原则意味着<strong>一个类只能有一个职责并且只完成为它设计的功能任务。</strong></p>
<p>否则，如果我们的类承担的职责多于一个，那么我们的代码就具有高度的耦合性，并会导致它对于任何改变都很脆弱。</p>
<p><strong>好处：</strong></p>
<ul>
<li>降低耦合性。</li>
<li>代码易于理解和维护。</li>
</ul>
<h4 id="违反-SRP-原则"><a href="#违反-SRP-原则" class="headerlink" title="违反 SRP 原则"></a><strong>违反 SRP 原则</strong></h4><ul>
<li>我们的 <strong>Customer</strong> 类<strong>有多个的职责：</strong></li>
</ul>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div></pre></td><td class="code"><pre><div class="line">public class Customer &#123;</div><div class="line"> </div><div class="line">    private String name;</div><div class="line"> </div><div class="line">    // getter and setter methods...</div><div class="line"> </div><div class="line">    // This is a Responsibility</div><div class="line">    public void storeCustomer(String customerName) &#123;</div><div class="line">        // store customer into a database...</div><div class="line">    &#125;</div><div class="line"> </div><div class="line">    // This is another Responsibility</div><div class="line">    public void generateCustomerReport(String customerName) &#123;</div><div class="line">        // generate a report...</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p><strong>storeCustomer(String name)</strong> 职责是把顾客存入数据库。这个职责是持续的，应该把它放在顾客类的外面。</p>
<p><strong>generateCustomerReport(String name)</strong> 职责是生成一个关于顾客的报告，所以它也应该放在顾客类的外面。</p>
<p>当一个类有多个职责，它就更加难以被理解，扩展和修改。</p>
<h4 id="更好的解决办法："><a href="#更好的解决办法：" class="headerlink" title="更好的解决办法："></a><strong>更好的解决办法：</strong></h4><p>我们 <strong>为每一个职责创建不同的类。</strong></p>
<ul>
<li><strong>Customer</strong> 类：</li>
</ul>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line">public class Customer &#123;</div><div class="line"> </div><div class="line">    private String name;</div><div class="line"> </div><div class="line">    // getter and setter methods...</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<ul>
<li><strong>CustomerDB</strong> 类用于持续的职责：</li>
</ul>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line">public class CustomerDB &#123;</div><div class="line"> </div><div class="line">    public void storeCustomer(String customerName) &#123;</div><div class="line">        // store customer into a database...</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<ul>
<li><strong>CustomerReportGenerator</strong> 类用于报告制作的职责：</li>
</ul>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line">public class CustomerReportGenerator &#123;</div><div class="line"> </div><div class="line">    public void generateReport(String customerName) &#123;</div><div class="line">        // generate a report...</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>这样，我们就有几个类，但是<strong>每个类都有单一的职责</strong>，我们就使它变成了低耦合高内聚。</p>
<h3 id="开闭原则（OCP）："><a href="#开闭原则（OCP）：" class="headerlink" title="开闭原则（OCP）："></a>开闭原则（OCP）：</h3><blockquote>
<p><strong>软件实体（类，模块，方法等）应该对扩展开放，对修改封闭。</strong></p>
</blockquote>
<p>根据这一原则，一个软件实体能很容易地扩展新功能而不必修改现有的代码。</p>
<p><strong>open for extension:</strong> 添加新的功能从而满足新的需求。</p>
<p><strong>close for modification:</strong> 扩展新的功能行为而不需要修改现有的代码。</p>
<p>如果我们应用这个原则，我们会有一个可扩展的系统且在更改需求的时候更不易出错。我们可以用<a href="https://en.wikipedia.org/wiki/Abstraction_%28software_engineering%29" target="_blank" rel="external">抽象</a>和<a href="https://en.wikipedia.org/wiki/Polymorphism_%28computer_science%29" target="_blank" rel="external">多态</a>来帮助我们应用这个原则。</p>
<p><strong>好处：</strong></p>
<ul>
<li>代码的可维护性和复用性。</li>
<li>代码会更健壮。</li>
</ul>
<h4 id="违反-OCP-原则"><a href="#违反-OCP-原则" class="headerlink" title="违反 OCP 原则"></a><strong>违反 OCP 原则</strong></h4><ul>
<li>我们有一个 <strong>Rectangle</strong> 类：</li>
</ul>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div></pre></td><td class="code"><pre><div class="line"></div><div class="line">public class Rectangle &#123;</div><div class="line"> </div><div class="line">    private int width;</div><div class="line">    private int height;</div><div class="line"> </div><div class="line">    // getter and setter methods...</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<ul>
<li>同时，我们有一个 <strong>Square</strong> 类</li>
</ul>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line">public class Square &#123;</div><div class="line"> </div><div class="line">    private int side;</div><div class="line"> </div><div class="line">    // getter and setter methods...</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<ul>
<li>我们还有一个 <strong>ShapePrinter</strong> 类可以画不同的形状：</li>
</ul>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div></pre></td><td class="code"><pre><div class="line"></div><div class="line">public class ShapePrinter &#123;</div><div class="line"> </div><div class="line">    public void drawShape(Object shape) &#123;</div><div class="line"> </div><div class="line">        if (shape instanceof Rectangle) &#123;</div><div class="line">            // Draw Rectangle...</div><div class="line">        &#125; else if (shape instanceof Square) &#123;</div><div class="line">            // Draw Square...</div><div class="line">        &#125;</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>可以看到，当我们每次想要画一个新的形状我们就要<strong>修改 ShapePrinter 类里的 drawShape 方法来接受这个新的形状。</strong></p>
<p>当要画新的形状种类的时候，ShapePrinter 类就会变得更让人难以理解并且不易于改变。</p>
<p>所以 <strong>ShapePrinter</strong> 类不对修改封闭。</p>
<h4 id="一个解决办法："><a href="#一个解决办法：" class="headerlink" title="一个解决办法："></a><strong>一个解决办法：</strong></h4><ul>
<li>我们添加一个 <strong>Shape</strong> 抽象类：</li>
</ul>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line"></div><div class="line">public abstract class Shape &#123;</div><div class="line">    abstract void draw();</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<ul>
<li>重构 <strong>Rectangle</strong> 类以继承自 <strong>Shape:</strong></li>
</ul>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div></pre></td><td class="code"><pre><div class="line">public class Rectangle extends Shape &#123;</div><div class="line"> </div><div class="line">    private int width;</div><div class="line">    private int height;</div><div class="line"> </div><div class="line">    // getter and setter methods...</div><div class="line"> </div><div class="line">    @Override</div><div class="line">    public void draw() &#123;</div><div class="line">        // Draw the Rectangle...</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>重构 <strong>Square</strong> 类以继承自 <strong>Shape:</strong></p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div></pre></td><td class="code"><pre><div class="line">public class Square extends Shape &#123;</div><div class="line"> </div><div class="line">    private int side;</div><div class="line"> </div><div class="line">    // getter and setter methods...</div><div class="line"> </div><div class="line">    @Override</div><div class="line">    public void draw() &#123;</div><div class="line">        // Draw the Square</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<ul>
<li><strong>ShapePrinter</strong> 的重构：</li>
</ul>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line">public class ShapePrinter &#123;</div><div class="line"> </div><div class="line">    public void drawShape(Shape shape) &#123;</div><div class="line">        shape.draw();</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>现在，<strong>ShapePrinter</strong> 类在我们添加了新的形状类型的同时也保持了完整性。</p>
<h4 id="另一个解决方法："><a href="#另一个解决方法：" class="headerlink" title="另一个解决方法："></a><strong>另一个解决方法：</strong></h4><p>用这个方法，<strong>ShapePrinter</strong> 也能在添加新形状的同时保持完整性，因为 <strong>drawShape 方法接受 Shape 抽象。</strong></p>
<ul>
<li>我们把 <strong>Shape</strong> 变成一个接口：</li>
</ul>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">public interface Shape &#123;</div><div class="line">    void draw();</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<ul>
<li>重构 <strong>Rectangle</strong> 类以实现 <strong>Shape:</strong></li>
</ul>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div></pre></td><td class="code"><pre><div class="line">public class Rectangle implements Shape &#123;</div><div class="line"> </div><div class="line">    private int width;</div><div class="line">    private int height;</div><div class="line"> </div><div class="line">    // getter and setter methods...</div><div class="line"> </div><div class="line">    @Override</div><div class="line">    public void draw() &#123;</div><div class="line">        // Draw the Rectangle...</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<ul>
<li>重构 <strong>Square</strong> 类以实现 <strong>Shape:</strong></li>
</ul>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div></pre></td><td class="code"><pre><div class="line">public class Square implements Shape &#123;</div><div class="line"> </div><div class="line">    private int side;</div><div class="line"> </div><div class="line">    // getter and setter methods...</div><div class="line"> </div><div class="line">    @Override</div><div class="line">    public void draw() &#123;</div><div class="line">        // Draw the Square</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<ul>
<li><strong>ShapePrinter:</strong></li>
</ul>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line">public class ShapePrinter &#123;</div><div class="line"> </div><div class="line">    public void drawShape(Shape shape) &#123;</div><div class="line">        shape.draw();</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<h3 id="里氏替换原则（LSP）："><a href="#里氏替换原则（LSP）：" class="headerlink" title="里氏替换原则（LSP）："></a>里氏替换原则（LSP）：</h3><blockquote>
<p><strong>程序里的对象都应该可以被它的子类实例替换而不用更改程序.</strong></p>
</blockquote>
<p>这个原则由 <a href="https://en.wikipedia.org/wiki/Barbara_Liskov" target="_blank" rel="external">Barbara Liskov</a> 定义。他说程序里的对象都应该可以被它的子类实例替换而不用更改系统的正常工作.</p>
<p><strong>好处:</strong></p>
<ul>
<li>更高的代码复用性。</li>
<li>类的层次结构易于理解。</li>
</ul>
<p>经常用于解释这个原则的经典例子就是长方形的例子。</p>
<h4 id="违反-LSP-原则"><a href="#违反-LSP-原则" class="headerlink" title="违反 LSP 原则:"></a><strong>违反 LSP 原则:</strong></h4><ul>
<li>我们有一个 <strong>Rectangle</strong> 类:</li>
</ul>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div></pre></td><td class="code"><pre><div class="line">public class Rectangle &#123;</div><div class="line"> </div><div class="line">    private int width;</div><div class="line">    private int height;</div><div class="line"> </div><div class="line">    public void setWidth(int width) &#123;</div><div class="line">        this.width = width;</div><div class="line">    &#125;</div><div class="line"> </div><div class="line">    public void setHeight(int height) &#123;</div><div class="line">        this.height = height;</div><div class="line">    &#125;</div><div class="line"> </div><div class="line">    public int getArea() &#123;</div><div class="line">        return width * height;</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<ul>
<li>还有一个 <strong>Square</strong> 类：</li>
</ul>
<p>因为一个正方形是一个长方形（从数学上讲），我们决定把 <strong>Square</strong> 作为 <strong>Rectangle</strong> 的子类。</p>
<p>我们在重写的 <strong>setHeight()</strong> 和 <strong>setWidth()</strong> 方法中设置（与它的父类）同样的尺寸（宽和高），让 <strong>Square</strong> 的实例依然有效。</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div></pre></td><td class="code"><pre><div class="line">public class Square extends Rectangle &#123;</div><div class="line"> </div><div class="line">    @Override </div><div class="line">    public void setWidth(int width) &#123;</div><div class="line">        super.setWidth(width);</div><div class="line">        super.setHeight(width);</div><div class="line">    &#125;</div><div class="line"> </div><div class="line">    @Override</div><div class="line">    public void setHeight(int height) &#123;</div><div class="line">        super.setWidth(height);</div><div class="line">        super.setHeight(height);</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>所以现在我们可以传一个 <strong>Square</strong> 实例到一个需要 <strong>Rectangle</strong> 实例的地方。</p>
<p>但是如果我们这样做，我们会<strong>破坏 Rectangle 的行为假设：</strong></p>
<p>下面对于 <strong>Rectangle</strong> 的假设是<strong>对的：</strong></p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div></pre></td><td class="code"><pre><div class="line">public class LiskovSubstitutionTest &#123;</div><div class="line"> </div><div class="line">    public static void main(String args[]) &#123;</div><div class="line">        Rectangle rectangle = new Rectangle();</div><div class="line">        rectangle.setWidth(2);</div><div class="line">        rectangle.setHeight(5);</div><div class="line"> </div><div class="line">        if (rectangle.getArea() == 10) &#123;</div><div class="line">            System.out.println(rectangle.getArea());</div><div class="line">        &#125;</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>但是同样的假设却不适用于 <strong>Square:</strong></p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div></pre></td><td class="code"><pre><div class="line">public class LiskovSubstitutionTest &#123;</div><div class="line"> </div><div class="line">    public static void main(String args[]) &#123;</div><div class="line">        Rectangle rectangle = new Square(); // Square</div><div class="line">        rectangle.setWidth(2);</div><div class="line">        rectangle.setHeight(5);</div><div class="line"> </div><div class="line">        if (rectangle.getArea() == 10) &#123;</div><div class="line">            System.out.println(rectangle.getArea());</div><div class="line">        &#125;</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p><strong>Square</strong> 不是 <strong>Rectangle</strong> 正确的替代品，因为它不遵循 <strong>Rectangle</strong> 的行为规则。</p>
<p><strong>Square</strong> / <strong>Rectangle</strong> 层次分离虽然不能反应出任何问题，但是这<strong>违反了里氏替换原则</strong>！</p>
<h4 id="一个解决方法："><a href="#一个解决方法：" class="headerlink" title="一个解决方法："></a><strong>一个解决方法：</strong></h4><ul>
<li>用 <strong>Shape</strong> 接口来获取面积：</li>
</ul>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">public interface Shape &#123;</div><div class="line">    int area();</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<ul>
<li>重构 <strong>Rectangle</strong> 以实现 <strong>Shape:</strong></li>
</ul>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div></pre></td><td class="code"><pre><div class="line">public class Rectangle implements Shape &#123;</div><div class="line"> </div><div class="line">    private int width;</div><div class="line">    private int height;</div><div class="line"> </div><div class="line">    public void setWidth(int width) &#123;</div><div class="line">        this.width = width;</div><div class="line">    &#125;</div><div class="line"> </div><div class="line">    public void setHeight(int height) &#123;</div><div class="line">        this.height = height;</div><div class="line">    &#125;</div><div class="line"> </div><div class="line">    @Override</div><div class="line">    public int area() &#123;</div><div class="line">        return width * height;</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>重构 <strong>Square</strong> 以实现 <strong>Shape:</strong></p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div></pre></td><td class="code"><pre><div class="line">public class Square implements Shape &#123;</div><div class="line"> </div><div class="line">    private int size;</div><div class="line"> </div><div class="line">    public void setSize(int size) &#123;</div><div class="line">        this.size = size;</div><div class="line">    &#125;</div><div class="line"> </div><div class="line">    @Override</div><div class="line">    public int area() &#123;</div><div class="line">        return size * size;</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<h4 id="另一个解决方法经常与非可变性一起应用"><a href="#另一个解决方法经常与非可变性一起应用" class="headerlink" title="另一个解决方法经常与非可变性一起应用"></a><strong>另一个解决方法经常与<a href="https://en.wikipedia.org/wiki/Immutable_object" target="_blank" rel="external">非可变性</a>一起应用</strong></h4><ul>
<li><strong>Rectangle</strong> 重构：</li>
</ul>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div></pre></td><td class="code"><pre><div class="line">public class Rectangle &#123;</div><div class="line"> </div><div class="line">    private final int width;</div><div class="line">    private final int height;</div><div class="line"> </div><div class="line">    public Rectangle(int width, int height) &#123;</div><div class="line">        this.width = width;</div><div class="line">        this.height = height;</div><div class="line">    &#125;</div><div class="line"> </div><div class="line">    public int getArea() &#123;</div><div class="line">        return width * height;</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<ul>
<li>重构 <strong>Square</strong> 以继承 <strong>Rectangle:</strong></li>
</ul>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line">public class Square extends Rectangle &#123;</div><div class="line"> </div><div class="line">    public Square(int side) &#123;</div><div class="line">        super(side, side);</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>很多时候，我们对类的建模依赖于我们想展示的现实世界客体的属性，但更重要的是我们应该关注它们各自的行为来避免这种错误。</p>
<h3 id="接口隔离原则（ISP）："><a href="#接口隔离原则（ISP）：" class="headerlink" title="接口隔离原则（ISP）："></a>接口隔离原则（ISP）：</h3><blockquote>
<p><strong>多个专用的接口比一个通用接口好。</strong></p>
</blockquote>
<p>这个原则定义了<strong>一个类决不要实现不会用到的接口</strong>。不遵循这个原则意味着在我们在实现里会依赖很多我们并不需要的方法，但又不得不去定义。</p>
<p>所以，实现多个特定的接口比实现一个通用接口要好。一个接口被需要用到的类所定义，所以这个接口不应该有这个类不需要实现的其它方法。</p>
<p><strong>好处：</strong></p>
<ul>
<li>系统解耦。</li>
<li>代码易于重构。</li>
</ul>
<h4 id="违反-ISP-原则"><a href="#违反-ISP-原则" class="headerlink" title="违反 ISP 原则"></a><strong>违反 ISP 原则</strong></h4><ul>
<li>我们有一个 <strong>Car</strong> 的接口：</li>
</ul>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line">public interface Car &#123;</div><div class="line">    void startEngine();</div><div class="line">    void accelerate();</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<ul>
<li>同时也有一个实现 <strong>Car</strong> 接口的 <strong>Mustang</strong> 类：</li>
</ul>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div></pre></td><td class="code"><pre><div class="line">public class Mustang implements Car &#123;</div><div class="line"> </div><div class="line">    @Override</div><div class="line">    public void startEngine() &#123;</div><div class="line">        // start engine...</div><div class="line">    &#125;</div><div class="line"> </div><div class="line">    @Override</div><div class="line">    public void accelerate() &#123;</div><div class="line">        // accelerate...</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>现在我们有个新的需求，要添加一个新的车型：</p>
<p>一辆 <strong>DeloRean,</strong> 但这并不是一个普通的 DeLorean，我们的 <strong>DeloRean</strong> 非常特别，它有穿梭时光的功能。</p>
<p>像以往一样，我们没有时间来做一个好的实现，而且 <strong>DeloRean</strong> 必须马上回到过去。</p>
<ul>
<li>为我们的 <strong>DeloRean</strong> 在 <strong>Car</strong> 接口里增加两个新的方法：</li>
</ul>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line">public interface Car &#123;</div><div class="line">    void startEngine();</div><div class="line">    void accelerate();</div><div class="line">    void backToThePast();</div><div class="line">    void backToTheFuture();</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<ul>
<li>现在我们的 <strong>DeloRean</strong> 实现 <strong>Car</strong> 的方法：</li>
</ul>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div></pre></td><td class="code"><pre><div class="line">public class DeloRean implements Car &#123;</div><div class="line"> </div><div class="line">    @Override</div><div class="line">    public void startEngine() &#123;</div><div class="line">        // start engine...</div><div class="line">    &#125;</div><div class="line"> </div><div class="line">    @Override</div><div class="line">    public void accelerate() &#123;</div><div class="line">        // accelerate...</div><div class="line">    &#125;</div><div class="line"> </div><div class="line">    @Override</div><div class="line">    public void backToThePast() &#123;</div><div class="line">        // back to the past...</div><div class="line">    &#125;</div><div class="line"> </div><div class="line">    @Override</div><div class="line">    public void backToTheFuture() &#123;</div><div class="line">        // back to the future...</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<ul>
<li>但是现在 <strong>Mustang</strong> 被迫去实现在 <strong>Car</strong> 接口里的新方法：</li>
</ul>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div></pre></td><td class="code"><pre><div class="line">public class Mustang implements Car &#123;</div><div class="line"> </div><div class="line">    @Override</div><div class="line">    public void startEngine() &#123;</div><div class="line">        // 启动引擎</div><div class="line">    &#125;</div><div class="line"> </div><div class="line">    @Override</div><div class="line">    public void accelerate() &#123;</div><div class="line">        // 加速</div><div class="line">    &#125;</div><div class="line"> </div><div class="line">    @Override</div><div class="line">    public void backToThePast() &#123;</div><div class="line">        // 因为 Mustang 不能回到过去！</div><div class="line">        throw new UnsupportedOperationException();</div><div class="line">    &#125;</div><div class="line"> </div><div class="line">    @Override</div><div class="line">    public void backToTheFuture() &#123;</div><div class="line">        // 因为 Mustang 不能穿越去未来！</div><div class="line">        throw new UnsupportedOperationException();</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>在这种情况下，Mustang <strong>违反了接口隔离的原则</strong>，因为它实现了它不会用到的方法。</p>
<h4 id="使用接口隔离的解决方法："><a href="#使用接口隔离的解决方法：" class="headerlink" title="使用接口隔离的解决方法："></a><strong>使用接口隔离的解决方法：</strong></h4><ul>
<li>重构 <strong>Car</strong> 接口：</li>
</ul>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line">public interface Car &#123;</div><div class="line">    void startEngine();</div><div class="line">    void accelerate();</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<ul>
<li>增添一个 <strong>TimeMachine</strong> 接口：</li>
</ul>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line">public interface TimeMachine &#123;</div><div class="line">    void backToThePast();</div><div class="line">    void backToTheFuture();</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<ul>
<li>重构 <strong>Mustang（只实现 Car 的接口）</strong></li>
</ul>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div></pre></td><td class="code"><pre><div class="line">public class Mustang implements Car &#123;</div><div class="line"> </div><div class="line">    @Override</div><div class="line">    public void startEngine() &#123;</div><div class="line">        // 启动引擎</div><div class="line">    &#125;</div><div class="line"> </div><div class="line">    @Override</div><div class="line">    public void accelerate() &#123;</div><div class="line">        // 加速</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<ul>
<li>重构 <strong>DeloRean（同时实现 Car 和 TimeMachine）</strong></li>
</ul>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div></pre></td><td class="code"><pre><div class="line">public class DeloRean implements Car, TimeMachine &#123;</div><div class="line"> </div><div class="line">    @Override</div><div class="line">    public void startEngine() &#123;</div><div class="line">        // 启动引擎</div><div class="line">    &#125;</div><div class="line"> </div><div class="line">    @Override</div><div class="line">    public void accelerate() &#123;</div><div class="line">        // 加速</div><div class="line">    &#125;</div><div class="line"> </div><div class="line">    @Override</div><div class="line">    public void backToThePast() &#123;</div><div class="line">        // 回到过去</div><div class="line">    &#125;</div><div class="line"> </div><div class="line">    @Override</div><div class="line">    public void backToTheFuture() &#123;</div><div class="line">        // 到未来去</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<h3 id="依赖倒转原则-DIP"><a href="#依赖倒转原则-DIP" class="headerlink" title="依赖倒转原则 (DIP):"></a>依赖倒转原则 (DIP):</h3><blockquote>
<p><strong>高层次的模块不应该依赖于低层次的模块，它们都应该依赖于抽象。</strong></p>
<p><strong>抽象不应该依赖于细节。细节应该依赖于抽象。</strong></p>
</blockquote>
<p>依赖倒转原则的意思是一个特定的类不应该直接依赖于另外一个类，但是可以依赖于这个类的抽象（接口）。</p>
<p>当我们应用这个原则的时候我们能减少对特定实现的依赖性，让我们的代码复用性更高。</p>
<p><strong>好处:</strong></p>
<ul>
<li>减少耦合。</li>
<li>代码更高的复用性。</li>
</ul>
<h4 id="违反-DIP-原则"><a href="#违反-DIP-原则" class="headerlink" title="违反 DIP 原则:"></a><strong>违反 DIP 原则:</strong></h4><ul>
<li>我们有一个类叫 <strong>DeliveryDriver</strong> 代表着一个司机为快递公司工作。</li>
</ul>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line">public class DeliveryDriver &#123;</div><div class="line"> </div><div class="line">    public void deliverProduct(Product product)&#123;</div><div class="line">        // 运送产品</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<ul>
<li><strong>DeliveryCompany</strong> 类处理货物装运：</li>
</ul>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line">public class DeliveryCompany &#123;</div><div class="line"> </div><div class="line">    public void sendProduct(Product product) &#123;</div><div class="line">        DeliveryDriver deliveryDriver = new DeliveryDriver();</div><div class="line">        deliveryDriver.deliverProduct(product);</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>我们注意到 <strong>DeliveryCompany</strong> 创建并使用 DeliveryDriver 实例。所以 <strong>DeliveryCompany</strong> 是一个依赖于低层次类的高层次的类，这就<strong>违背了依赖倒转原则</strong>。（译者注：上述代码中 DeliveryCompany 需要运送货物，必须需要一个 DeliveryDriver 参与。但如果以后对司机有更多的要求，那我们既要修改 DeliveryDriver 也要修改上述代码。这样造成的依赖，耦合度高）</p>
<h4 id="A-solution"><a href="#A-solution" class="headerlink" title="A solution:"></a><strong>A solution:</strong></h4><h4 id="解决方法"><a href="#解决方法" class="headerlink" title="解决方法:"></a><strong>解决方法:</strong></h4><ul>
<li>我们创建 <strong>DeliveryService</strong> 接口，这样我们就有了一个抽象。</li>
</ul>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">public interface DeliveryService &#123;</div><div class="line">    void deliverProduct(Product product);</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<ul>
<li>重构 <strong>DeliveryDriver</strong> 类以实现 <strong>DeliveryService</strong> 的抽象方法：</li>
</ul>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line">public class DeliveryDriver implements DeliveryService &#123;</div><div class="line"> </div><div class="line">    @Override</div><div class="line">    public void deliverProduct(Product product) &#123;</div><div class="line">        // 运送产品</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<ul>
<li>重构 <strong>DeliveryCompany</strong>，使它依赖于一个抽象而不是一个具体的东西。</li>
</ul>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div></pre></td><td class="code"><pre><div class="line">public class DeliveryCompany &#123;</div><div class="line"> </div><div class="line">    private DeliveryService deliveryService;</div><div class="line"> </div><div class="line">    public DeliveryCompany(DeliveryService deliveryService) &#123;</div><div class="line">        this.deliveryService = deliveryService;</div><div class="line">    &#125;</div><div class="line"> </div><div class="line">    public void sendProduct(Product product) &#123;</div><div class="line">        this.deliveryService.deliverProduct(product);</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>现在，依赖在别的地方创建，并且从类构造器中被注入。</p>
<p>千万不要把这个原则与<a href="https://en.wikipedia.org/wiki/Dependency_injection" target="_blank" rel="external">依赖注入</a>混淆。依赖注入是一种设计模式，帮助我们应用这个原则来确保各个类之间的合作不涉及相互依赖。</p>
<p>这里有好几个库使依赖注入更容易实现，像 <a href="https://github.com/google/guice" target="_blank" rel="external">Guice</a> 或者非常流行的 <a href="https://github.com/google/dagger" target="_blank" rel="external">Dagger2</a>。</p>
<h3 id="结论"><a href="#结论" class="headerlink" title="结论"></a>结论</h3><p>遵循 SOLID 原则来构建高质量, 易于扩展, 足够健壮并且可复用的软件是非常必要的。同时, 我们也不要忘了从实际和常识出发, 因为有的时候过份设计会使简单的问题复杂化。</p>
]]></content>
    
    <summary type="html">
    
      &lt;blockquote&gt;
&lt;ul&gt;
&lt;li&gt;原文地址：&lt;a href=&quot;https://android.jlelse.eu/solid-principles-the-definitive-guide-75e30a284dea#.8b78yjtyk&quot; target=&quot;_blank&quot;
    
    </summary>
    
      <category term="java" scheme="http://wodewone.com/categories/java/"/>
    
    
      <category term="OOP" scheme="http://wodewone.com/tags/OOP/"/>
    
      <category term="java" scheme="http://wodewone.com/tags/java/"/>
    
      <category term="solid" scheme="http://wodewone.com/tags/solid/"/>
    
      <category term="SOLID" scheme="http://wodewone.com/tags/SOLID/"/>
    
  </entry>
  
  <entry>
    <title>从输入URL到页面加载发生了什么</title>
    <link href="http://wodewone.com/2017/03/28/enter-url-to-html/"/>
    <id>http://wodewone.com/2017/03/28/enter-url-to-html/</id>
    <published>2017-03-28T13:50:41.000Z</published>
    <updated>2017-04-05T07:40:11.000Z</updated>
    
    <content type="html"><![CDATA[<ul>
<li><a href="https://segmentfault.com/a/1190000006879700" target="_blank" rel="external">原文地址</a></li>
</ul>
<h1 id="从输入URL到页面加载发生了什么"><a href="#从输入URL到页面加载发生了什么" class="headerlink" title="从输入URL到页面加载发生了什么"></a>从输入URL到页面加载发生了什么</h1><p>最近在进行前端面试方面的一些准备，看了网上许多相关的文章，发现有一个问题始终绕不开: 在浏览器中输入URL到整个页面显示在用户面前时这个过程中到底发生了什么。仔细思考这个问题，发现确实很深，这个过程涉及到的东西很多。这个问题的回答真的能够很好的考验一个web工程师的水平，于是我自问自答一番。</p>
<p>总体来说分为以下几个过程:</p>
<ol>
<li><p>DNS解析</p>
</li>
<li><p>TCP连接</p>
</li>
<li><p>发送HTTP请求</p>
</li>
<li><p>服务器处理请求并返回HTTP报文</p>
</li>
<li><p>浏览器解析渲染页面</p>
</li>
<li><p>连接结束</p>
</li>
</ol>
<h2 id="具体过程"><a href="#具体过程" class="headerlink" title="具体过程"></a>具体过程</h2><h3 id="DNS解析"><a href="#DNS解析" class="headerlink" title="DNS解析"></a>DNS解析</h3><p>DNS解析的过程就是寻找哪台机器上有你需要资源的过程。当你在浏览器中输入一个地址时，例如www.baidu.com，其实不是百度网站真正意义上的地址。互联网上每一台计算机的唯一标识是它的IP地址，但是IP地址并不方便记忆。用户更喜欢用方便记忆的网址去寻找互联网上的其它计算机，也就是上面提到的百度的网址。所以互联网设计者需要在用户的方便性与可用性方面做一个权衡，这个权衡就是一个网址到IP地址的转换，这个过程就是DNS解析。它实际上充当了一个翻译的角色，实现了网址到IP地址的转换。网址到IP地址转换的过程是如何进行的?</p>
<h4 id="解析过程"><a href="#解析过程" class="headerlink" title="解析过程"></a>解析过程</h4><p>DNS解析是一个递归查询的过程。</p>
<p><img src="/2017/03/28/enter-url-to-html/1618288278-57f00bf9444dd_articlex.png" alt="1618288278-57f00bf9444dd_articlex.png"></p>
<p>上述图片是查找www.google.com的IP地址过程。首先在本地域名服务器中查询IP地址，如果没有找到的情况下，本地域名服务器会向根域名服务器发送一个请求，如果根域名服务器也不存在该域名时，本地域名会向com顶级域名服务器发送一个请求，依次类推下去。直到最后本地域名服务器得到google的IP地址并把它缓存到本地，供下次查询使用。从上述过程中，可以看出网址的解析是一个从右向左的过程: com -&gt; google.com -&gt; www.google.com。但是你是否发现少了点什么，根域名服务器的解析过程呢？事实上，真正的网址是www.google.com.，并不是我多打了一个.，这个.对应的就是根域名服务器，默认情况下所有的网址的最后一位都是.，既然是默认情况下，为了方便用户，通常都会省略，浏览器在请求DNS的时候会自动加上，所有网址真正的解析过程为: . -&gt; .com -&gt; google.com. -&gt; www.google.com.。</p>
<h4 id="DNS优化"><a href="#DNS优化" class="headerlink" title="DNS优化"></a>DNS优化</h4><p>了解了DNS的过程，可以为我们带来哪些？上文中请求到google的IP地址时，经历了8个步骤，这个过程中存在多个请求(同时存在UDP和TCP请求，为什么有两种请求方式，请自行查找)。如果每次都经过这么多步骤，是否太耗时间？如何减少该过程的步骤呢？那就是DNS缓存。</p>
<h5 id="DNS缓存"><a href="#DNS缓存" class="headerlink" title="DNS缓存"></a>DNS缓存</h5><p>DNS存在着多级缓存，从离浏览器的距离排序的话，有以下几种: 浏览器缓存，系统缓存，路由器缓存，IPS服务器缓存，根域名服务器缓存，顶级域名服务器缓存，主域名服务器缓存。</p>
<ul>
<li><p>在你的chrome浏览器中输入:chrome://dns/，你可以看到chrome浏览器的DNS缓存。</p>
</li>
<li><p>系统缓存主要存在/etc/hosts(Linux系统)中:</p>
</li>
</ul>
<p><img src="/2017/03/28/enter-url-to-html/2644576721-57f01287b68cc_articlex.png" alt="2644576721-57f01287b68cc_articlex.png"></p>
<ul>
<li>…</li>
</ul>
<h5 id="DNS负载均衡"><a href="#DNS负载均衡" class="headerlink" title="DNS负载均衡"></a>DNS负载均衡</h5><p>不知道大家有没有思考过一个问题: DNS返回的IP地址是否每次都一样？如果每次都一样是否说明你请求的资源都位于同一台机器上面，那么这台机器需要多高的性能和储存才能满足亿万请求呢？其实真实的互联网世界背后存在成千上百台服务器，大型的网站甚至更多。但是在用户的眼中，它需要的只是处理他的请求，哪台机器处理请求并不重要。DNS可以返回一个合适的机器的IP给用户，例如可以根据每台机器的负载量，该机器离用户地理位置的距离等等，这种过程就是DNS负载均衡，又叫做DNS重定向。大家耳熟能详的CDN(Content Delivery Network)就是利用DNS的重定向技术，DNS服务器会返回一个跟用户最接近的点的IP地址给用户，CDN节点的服务器负责响应用户的请求，提供所需的内容。在这里打个免费的广告，我平时使用的比较多的是七牛云的CDN(免费)储存图片，作为我个人博客的图床使用。</p>
<h3 id="TCP连接"><a href="#TCP连接" class="headerlink" title="TCP连接"></a>TCP连接</h3><p>HTTP协议是使用TCP作为其传输层协议的，当TCP出现瓶颈时，HTTP也会受到影响。但由于TCP优化这一块我平常接触的并不是很多，再加上大学时的计算机网络的基础基本上忘完，所以这一部分我也就不在这里分析了。</p>
<h4 id="HTTPS协议"><a href="#HTTPS协议" class="headerlink" title="HTTPS协议"></a>HTTPS协议</h4><p>我不知道把HTTPS放在这个部分是否合适，但是放在这里好像又说的过去。HTTP报文是包裹在TCP报文中发送的，服务器端收到TCP报文时会解包提取出HTTP报文。但是这个过程中存在一定的风险，HTTP报文是明文，如果中间被截取的话会存在一些信息泄露的风险。那么在进入TCP报文之前对HTTP做一次加密就可以解决这个问题了。HTTPS协议的本质就是HTTP + SSL(or TLS)。在HTTP报文进入TCP报文之前，先使用SSL对HTTP报文进行加密。从网络的层级结构看它位于HTTP协议与TCP协议之间。</p>
<p><img src="/2017/03/28/enter-url-to-html/3598916885-5608f6c220945_articlex.png" alt="3598916885-5608f6c220945_articlex.png"></p>
<h4 id="HTTPS过程"><a href="#HTTPS过程" class="headerlink" title="HTTPS过程"></a>HTTPS过程</h4><p>HTTPS在传输数据之前需要客户端与服务器进行一个握手(TLS/SSL握手)，在握手过程中将确立双方加密传输数据的密码信息。TLS/SSL使用了非对称加密，对称加密以及hash等。具体过程请参考经典的阮一峰先生的博客<a href="http://www.ruanyifeng.com/blog/2014/09/illustration-ssl.html" target="_blank" rel="external">TLS/SSL握手过程</a>。<br>HTTPS相比于HTTP，虽然提供了安全保证，但是势必会带来一些时间上的损耗，如握手和加密等过程，是否使用HTTPS需要根据具体情况在安全和性能方面做出权衡。</p>
<h3 id="HTTP请求"><a href="#HTTP请求" class="headerlink" title="HTTP请求"></a>HTTP请求</h3><p>其实这部分又可以称为前端工程师眼中的HTTP，它主要发生在客户端。发送HTTP请求的过程就是构建HTTP请求报文并通过TCP协议中发送到服务器指定端口(HTTP协议80/8080, HTTPS协议443)。HTTP请求报文是由三部分组成: <strong>请求行</strong>, <strong>请求报头</strong>和<strong>请求正文</strong>。</p>
<h4 id="请求行"><a href="#请求行" class="headerlink" title="请求行"></a>请求行</h4><p>格式如下:<br><code>Method Request-URL HTTP-Version CRLF</code></p>
<div class="widget-codetool" style="display:none;"><br><br><div class="widget-codetool--inner"><span class="selectCode code-tool" data-toggle="tooltip" data-placement="top" title="" data-original-title="全选"></span><span type="button" class="copyCode code-tool" data-toggle="tooltip" data-placement="top" data-clipboard-text="eg: GET index.html HTTP/1.1
" title="" data-original-title="复制"></span><span type="button" class="saveToNote code-tool" data-toggle="tooltip" data-placement="top" title="" data-original-title="放进笔记"></span></div>

<p></p></div><p></p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">eg: GET index.html HTTP/1.1</div></pre></td></tr></table></figure>
<p>常用的方法有: GET, POST, PUT, DELETE, OPTIONS, HEAD。</p>
<p>TODO：</p>
<ul>
<li>GET和POST有什么区别？</li>
</ul>
<h4 id="请求报头"><a href="#请求报头" class="headerlink" title="请求报头"></a>请求报头</h4><p>请求报头允许客户端向服务器传递请求的附加信息和客户端自身的信息。<br>PS: 客户端不一定特指浏览器，有时候也可使用Linux下的CURL命令以及HTTP客户端测试工具等。<br>常见的请求报头有: Accept, Accept-Charset, Accept-Encoding, Accept-Language, Content-Type, Authorization, Cookie, User-Agent等。</p>
<p><img src="/2017/03/28/enter-url-to-html/3739029528-57d55e6ce8b6c_articlex.png" alt="3739029528-57d55e6ce8b6c_articlex.png"></p>
<p>上图是使用Chrome开发者工具截取的对百度的HTTP请求以及响应报文，从图中可以看出，请求报头中使用了Accept, Accept-Encoding, Accept-Language, Cache-Control, Connection, Cookie等字段。Accept用于指定客户端用于接受哪些类型的信息，Accept-Encoding与Accept类似，它用于指定接受的编码方式。Connection设置为Keep-alive用于告诉客户端本次HTTP请求结束之后并不需要关闭TCP连接，这样可以使下次HTTP请求使用相同的TCP通道，节省TCP连接建立的时间。</p>
<h4 id="请求正文"><a href="#请求正文" class="headerlink" title="请求正文"></a>请求正文</h4><p>当使用POST, PUT等方法时，通常需要客户端向服务器传递数据。这些数据就储存在请求正文中。在请求包头中有一些与请求正文相关的信息，例如: 现在的Web应用通常采用Rest架构，请求的数据格式一般为json。这时就需要设置Content-Type: application/json。</p>
<h3 id="服务器处理请求并返回HTTP报文"><a href="#服务器处理请求并返回HTTP报文" class="headerlink" title="服务器处理请求并返回HTTP报文"></a>服务器处理请求并返回HTTP报文</h3><p>自然而然这部分对应的就是后端工程师眼中的HTTP。后端从在固定的端口接收到TCP报文开始，这一部分对应于编程语言中的socket。它会对TCP连接进行处理，对HTTP协议进行解析，并按照报文格式进一步封装成HTTP Request对象，供上层使用。这一部分工作一般是由Web服务器去进行，我使用过的Web服务器有Tomcat, Jetty和Netty等等。</p>
<p>HTTP响应报文也是由三部分组成: <strong>状态码</strong>, <strong>响应报头</strong>和<strong>响应报文</strong>。</p>
<h4 id="状态码"><a href="#状态码" class="headerlink" title="状态码"></a>状态码</h4><p>状态码是由3位数组成，第一个数字定义了响应的类别，且有五种可能取值:</p>
<ul>
<li><p>1xx：指示信息–表示请求已接收，继续处理。</p>
</li>
<li><p>2xx：成功–表示请求已被成功接收、理解、接受。</p>
</li>
<li><p>3xx：重定向–要完成请求必须进行更进一步的操作。</p>
</li>
<li><p>4xx：客户端错误–请求有语法错误或请求无法实现。</p>
</li>
<li><p>5xx：服务器端错误–服务器未能实现合法的请求。<br>平时遇到比较常见的状态码有:200, 204, 301, 302, 304, 400, 401, 403, 404, 422, 500(分别表示什么请自行查找)。</p>
</li>
</ul>
<p>TODO:</p>
<ul>
<li><p>301和302有什么区别？</p>
</li>
<li><p>HTTP缓存</p>
</li>
</ul>
<p><img src="/2017/03/28/enter-url-to-html/3884439248-57f0f943c72f3_articlex.png" alt="3884439248-57f0f943c72f3_articlex.png"></p>
<p>该图是本公司对状态码的一个总结，绘制而成的status code map，请大家参考。</p>
<h4 id="响应报头"><a href="#响应报头" class="headerlink" title="响应报头"></a>响应报头</h4><p>常见的响应报头字段有: Server, Connection…。</p>
<h4 id="响应报文"><a href="#响应报文" class="headerlink" title="响应报文"></a>响应报文</h4><p>服务器返回给浏览器的文本信息，通常HTML, CSS, JS, 图片等文件就放在这一部分。</p>
<h3 id="浏览器解析渲染页面"><a href="#浏览器解析渲染页面" class="headerlink" title="浏览器解析渲染页面"></a>浏览器解析渲染页面</h3><p>浏览器在收到HTML,CSS,JS文件后，它是如何把页面呈现到屏幕上的？下图对应的就是WebKit渲染的过程。</p>
<p><img src="/2017/03/28/enter-url-to-html/775625205-57d4063b7b60d_articlex.png" alt="775625205-57d4063b7b60d_articlex.png"></p>
<p>浏览器是一个边解析边渲染的过程。首先浏览器解析HTML文件构建DOM树，然后解析CSS文件构建渲染树，等到渲染树构建完成后，浏览器开始布局渲染树并将其绘制到屏幕上。这个过程比较复杂，涉及到两个概念: reflow(回流)和repain(重绘)。DOM节点中的各个元素都是以盒模型的形式存在，这些都需要浏览器去计算其位置和大小等，这个过程称为relow;当盒模型的位置,大小以及其他属性，如颜色,字体,等确定下来之后，浏览器便开始绘制内容，这个过程称为repain。页面在首次加载时必然会经历reflow和repain。reflow和repain过程是非常消耗性能的，尤其是在移动设备上，它会破坏用户体验，有时会造成页面卡顿。所以我们应该尽可能少的减少reflow和repain。</p>
<p><img src="/2017/03/28/enter-url-to-html/3426749863-57d54b4293001_articlex.png" alt="3426749863-57d54b4293001_articlex.png"></p>
<p>JS的解析是由浏览器中的JS解析引擎完成的。JS是单线程运行，也就是说，在同一个时间内只能做一件事，所有的任务都需要排队，前一个任务结束，后一个任务才能开始。但是又存在某些任务比较耗时，如IO读写等，所以需要一种机制可以先执行排在后面的任务，这就是：同步任务(synchronous)和异步任务(asynchronous)。JS的执行机制就可以看做是一个主线程加上一个任务队列(task queue)。同步任务就是放在主线程上执行的任务，异步任务是放在任务队列中的任务。所有的同步任务在主线程上执行，形成一个执行栈;异步任务有了运行结果就会在任务队列中放置一个事件；脚本运行时先依次运行执行栈，然后会从任务队列里提取事件，运行任务队列中的任务，这个过程是不断重复的，所以又叫做事件循环(Event loop)。</p>
<p>浏览器在解析过程中，如果遇到请求外部资源时，如图像,iconfont,JS等。浏览器将重复1-6过程下载该资源。请求过程是异步的，并不会影响HTML文档进行加载，但是当文档加载过程中遇到JS文件，HTML文档会挂起渲染过程，不仅要等到文档中JS文件加载完毕还要等待解析执行完毕，才会继续HTML的渲染过程。原因是因为JS有可能修改DOM结构，这就意味着JS执行完成前，后续所有资源的下载是没有必要的，这就是JS阻塞后续资源下载的根本原因。CSS文件的加载不影响JS文件的加载，但是却影响JS文件的执行。JS代码执行前浏览器必须保证CSS文件已经下载并加载完毕。</p>
<h2 id="Web优化"><a href="#Web优化" class="headerlink" title="Web优化"></a>Web优化</h2><p>上面部分主要介绍了一次完整的请求对应的过程，了解该过程的目的无非就是为了Web优化。在谈到Web优化之前，我们回到一个更原始的问题，Web前端的本质是什么。我的理解是: 将信息快速并友好的展示给用户并能够与用户进行交互。快速的意思就是在尽可能短的时间内完成页面的加载，试想一下当你在淘宝购买东西的时候，淘宝页面加载了10几秒才显示出物品，这个时候你还有心情去购买吗？怎么快速的完成页面的加载呢？优雅的学院派雅虎给出了常用的一些手段，也就是我们熟悉的<a href="https://developer.yahoo.com/performance/" target="_blank" rel="external">雅虎34条军规</a>。这34军规实际上就是围绕请求过程进行的一些优化方式。</p>
<p>如何尽快的加载资源？答案就是能不从网络中加载的资源就不从网络中加载，当我们合理使用缓存，将资源放在浏览器端，这是最快的方式。如果资源必须从网络中加载，则要考虑缩短连接时间，即DNS优化部分;减少响应内容大小，即对内容进行压缩。另一方面，如果加载的资源数比较少的话，也可以快速的响应用户。当资源到达浏览器之后，浏览器开始进行解析渲染，浏览器中最耗时的部分就是reflow，所以围绕这一部分就是考虑如何减少reflow的次数。</p>
<hr>
<ul>
<li><a href="https://segmentfault.com/a/1190000006879700" target="_blank" rel="external">原文地址</a></li>
</ul>
]]></content>
    
    <summary type="html">
    
      &lt;ul&gt;
&lt;li&gt;&lt;a href=&quot;https://segmentfault.com/a/1190000006879700&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;原文地址&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;h1 id=&quot;从输入URL到页面加载发生了什么&quot;&gt;
    
    </summary>
    
      <category term="html" scheme="http://wodewone.com/categories/html/"/>
    
    
      <category term="html" scheme="http://wodewone.com/tags/html/"/>
    
      <category term="DNS" scheme="http://wodewone.com/tags/DNS/"/>
    
      <category term="URL" scheme="http://wodewone.com/tags/URL/"/>
    
  </entry>
  
  <entry>
    <title>生成项目结构图 - Tree命令的使用</title>
    <link href="http://wodewone.com/2017/02/19/node-tree-user/"/>
    <id>http://wodewone.com/2017/02/19/node-tree-user/</id>
    <published>2017-02-19T02:12:44.000Z</published>
    <updated>2017-02-23T02:48:56.000Z</updated>
    
    <content type="html"><![CDATA[<h2 id="Tree命令"><a href="#Tree命令" class="headerlink" title="Tree命令"></a>Tree命令</h2><blockquote>
<p>本文写给不知所云的小白，知道的就当回忆一下啦！</p>
</blockquote>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div></pre></td><td class="code"><pre><div class="line">.</div><div class="line">├── ./app						# webapck 编译打包压缩生成的文件</div><div class="line">├── ./build					# electron-builder生成安装包配置目录</div><div class="line">│   ├── ./build/background.png   # (macOS DMG background)</div><div class="line">│   ├── ./build/icon.icns        # (macOS app icon)</div><div class="line">│   └── ./build/icon.ico         # (Windows app icon)</div><div class="line">├── ./dev-server.js</div><div class="line">├── ./json					# 部分Api接口数据</div><div class="line">├── ./main.js					# electron 初始化文件</div><div class="line">├── ./package.json</div><div class="line">├── ./preview					# 项目运行预览图</div><div class="line">├── ./src</div><div class="line">│   ├── ./src/assets		# 静态资源文件</div><div class="line">│   ├── ./src/components	# 项目组件文件</div><div class="line">│   ├── ./src/js				# 主模块文件</div><div class="line">│   ├── ./src/main.js		# render 进程入口文件</div><div class="line">│   └── ./src/sass			# 样式文件</div><div class="line">└── ./webpack.config.js		# webpack 配置文件</div></pre></td></tr></table></figure>
<p>你一定见过这样的项目结构图吧，其实他也不是图，是一段代码；<br>如果你知道它那就不用看后面的了，或许你有更好的方式也可以和大家分享~~</p>
<p>也许你以为它是<code>makedown</code>里面的语法，然后你满心欢喜的搜索关于<code>makedown</code>的语法教程~</p>
<p>最终你会发现根本特么找不到~</p>
<p>哈哈~</p>
<p>接着你会以为这是手动敲出来的，然后当你一个个字符敲的时候，发现好麻烦！</p>
<p>直到这里，如果我告诉你这是window自带的工具，你会不会疯~<br>其实windows和linux都有<code>tree</code>命令，主要功能是创建文件列表，将所有文件以树的形式列出来</p>
<p>然而</p>
<h2 id="开始"><a href="#开始" class="headerlink" title="开始"></a>开始</h2><h3 id="windows"><a href="#windows" class="headerlink" title="windows"></a>windows</h3><p>windows下的<code>tree</code>比较辣鸡，只有两个参数，<code>/F</code>是递归显示每个文件夹的名称；<code>/A</code> 是使用ASCII字符而不是扩展字符，感觉还不如不加<code>/A</code> 参数好。</p>
<h3 id="linux"><a href="#linux" class="headerlink" title="linux"></a>linux</h3><p>linux下的<code>tree</code>就比较强大了，但一般系统并不自带这个命令，需要手动下载安装：<code>sudo apt-get install tree</code> 。文件很小，只有31K，但功能可强大了！</p>
<h3 id="mac"><a href="#mac" class="headerlink" title="mac"></a>mac</h3><p>Mac 的话是没有自带<code>tree</code>命令的，但是我们可以通过<code>homebrew</code>（如果你不知道它的话，<a href="https://brew.sh/index_zh-cn.html" target="_blank" rel="external">这是官网</a>）安装：</p>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">brew install tree</div></pre></td></tr></table></figure>
<p>然后等待安装完成后</p>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">tree --version	<span class="comment"># 查看是否安装成功</span></div><div class="line">tree --help		<span class="comment"># 查看帮助</span></div></pre></td></tr></table></figure>
<h2 id="Api"><a href="#Api" class="headerlink" title="Api"></a>Api</h2><blockquote>
<p>命令有很多，但是看常用的无非就是：<br>-f 生成关系图<br>-I 忽略文件/文件夹<br>-d 只输出目录</p>
</blockquote>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div><div class="line">57</div><div class="line">58</div><div class="line">59</div><div class="line">60</div></pre></td><td class="code"><pre><div class="line">usage: tree [-acdfghilnpqrstuvxACDFJQNSUX] [-H baseHREF] [-T title ]</div><div class="line">	[-L level [-R]] [-P pattern] [-I pattern] [-o filename] [--version]</div><div class="line">	[--help] [--inodes] [--device] [--noreport] [--nolinks] [--dirsfirst]</div><div class="line">	[--charset charset] [--filelimit[=]<span class="comment">#] [--si] [--timefmt[=]&lt;f&gt;]</span></div><div class="line">	[--sort[=]&lt;name&gt;] [--matchdirs] [--ignore-case] [--] [&lt;directory list&gt;]</div><div class="line">  ------- Listing options -------</div><div class="line">  <span class="_">-a</span>            All files are listed.</div><div class="line">  <span class="_">-d</span>            List directories only.</div><div class="line">  <span class="_">-l</span>            Follow symbolic links like directories.</div><div class="line">  <span class="_">-f</span>            Print the full path prefix <span class="keyword">for</span> each file.</div><div class="line">  -x            Stay on current filesystem only.</div><div class="line">  -L level      Descend only level directories deep.</div><div class="line">  -R            Rerun tree when max dir level reached.</div><div class="line">  -P pattern    List only those files that match the pattern given.</div><div class="line">  -I pattern    Do not list files that match the given pattern.</div><div class="line">  --ignore-case Ignore <span class="keyword">case</span> when pattern matching.</div><div class="line">  --matchdirs   Include directory names <span class="keyword">in</span> -P pattern matching.</div><div class="line">  --noreport    Turn off file/directory count at end of tree listing.</div><div class="line">  --charset X   Use charset X <span class="keyword">for</span> terminal/HTML and indentation line output.</div><div class="line">  --filelimit <span class="comment"># Do not descend dirs with more than # files in them.</span></div><div class="line">  --timefmt &lt;f&gt; Print and format time according to the format &lt;f&gt;.</div><div class="line">  -o filename   Output to file instead of stdout.</div><div class="line">  -------- File options ---------</div><div class="line">  -q            Print non-printable characters as <span class="string">'?'</span>.</div><div class="line">  -N            Print non-printable characters as is.</div><div class="line">  -Q            Quote filenames with double quotes.</div><div class="line">  -p            Print the protections <span class="keyword">for</span> each file.</div><div class="line">  -u            Displays file owner or UID number.</div><div class="line">  -g            Displays file group owner or GID number.</div><div class="line">  <span class="_">-s</span>            Print the size <span class="keyword">in</span> bytes of each file.</div><div class="line">  -h            Print the size <span class="keyword">in</span> a more human readable way.</div><div class="line">  --si          Like -h, but use <span class="keyword">in</span> SI units (powers of 1000).</div><div class="line">  -D            Print the date of last modification or (-c) status change.</div><div class="line">  -F            Appends <span class="string">'/'</span>, <span class="string">'='</span>, <span class="string">'*'</span>, <span class="string">'@'</span>, <span class="string">'|'</span> or <span class="string">'&gt;'</span> as per ls -F.</div><div class="line">  --inodes      Print inode number of each file.</div><div class="line">  --device      Print device ID number to <span class="built_in">which</span> each file belongs.</div><div class="line">  ------- Sorting options -------</div><div class="line">  -v            Sort files alphanumerically by version.</div><div class="line">  -t            Sort files by last modification time.</div><div class="line">  -c            Sort files by last status change time.</div><div class="line">  -U            Leave files unsorted.</div><div class="line">  -r            Reverse the order of the sort.</div><div class="line">  --dirsfirst   List directories before files (-U disables).</div><div class="line">  --sort X      Select sort: name,version,size,mtime,ctime.</div><div class="line">  ------- Graphics options ------</div><div class="line">  -i            Don<span class="string">'t print indentation lines.</span></div><div class="line">  -A            Print ANSI lines graphic indentation lines.</div><div class="line">  -S            Print with CP437 (console) graphics indentation lines.</div><div class="line">  -n            Turn colorization off always (-C overrides).</div><div class="line">  -C            Turn colorization on always.</div><div class="line">  ------- XML/HTML/JSON options -------</div><div class="line">  -X            Prints out an XML representation of the tree.</div><div class="line">  -J            Prints out an JSON representation of the tree.</div><div class="line">  -H baseHREF   Prints out HTML format with baseHREF as top directory.</div><div class="line">  -T string     Replace the default HTML title and H1 header with string.</div><div class="line">  --nolinks     Turn off hyperlinks in HTML output.</div><div class="line">  ---- Miscellaneous options ----</div><div class="line">  --version     Print version and exit.</div><div class="line">  --help        Print usage and this help message and exit.</div><div class="line">  --            Options processing terminator.</div></pre></td></tr></table></figure>
<h2 id="中文Api"><a href="#中文Api" class="headerlink" title="中文Api"></a>中文Api</h2><blockquote>
<p>如果你觉得上面的看起来很麻烦，那就看这里 😉</p>
</blockquote>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div></pre></td><td class="code"><pre><div class="line"><span class="_">-a</span> 显示所有文件和目录。</div><div class="line"></div><div class="line">-A 使用ASNI绘图字符显示树状图而非以ASCII字符组合。</div><div class="line"></div><div class="line">-C 在文件和目录清单加上色彩，便于区分各种类型。</div><div class="line"></div><div class="line"><span class="_">-d</span> 显示目录名称而非内容。</div><div class="line"></div><div class="line">-D 列出文件或目录的更改时间。</div><div class="line"></div><div class="line"><span class="_">-f</span> 在每个文件或目录之前，显示完整的相对路径名称。</div><div class="line"></div><div class="line">-F 在执行文件，目录，Socket，符号连接，管道名称名称，各自加上<span class="string">"*"</span>,<span class="string">"/"</span>,<span class="string">"="</span>,<span class="string">"@"</span>,<span class="string">"|"</span>号。</div><div class="line"></div><div class="line">-g 列出文件或目录的所属群组名称，没有对应的名称时，则显示群组识别码。</div><div class="line"></div><div class="line">-i 不以阶梯状列出文件或目录名称。</div><div class="line"></div><div class="line">-I 不显示符合范本样式的文件或目录名称。</div><div class="line"></div><div class="line"><span class="_">-l</span> 如遇到性质为符号连接的目录，直接列出该连接所指向的原始目录。</div><div class="line"></div><div class="line">-n 不在文件和目录清单加上色彩。</div><div class="line"></div><div class="line">-N 直接列出文件和目录名称，包括控制字符。</div><div class="line"></div><div class="line">-p 列出权限标示。</div><div class="line"></div><div class="line">-P 只显示符合范本样式的文件或目录名称。</div><div class="line"></div><div class="line">-q 用<span class="string">"?"</span>号取代控制字符，列出文件和目录名称。</div><div class="line"></div><div class="line"><span class="_">-s</span> 列出文件或目录大小。</div><div class="line"></div><div class="line">-t 用文件和目录的更改时间排序。</div><div class="line"></div><div class="line">-u 列出文件或目录的拥有者名称，没有对应的名称时，则显示用户识别码。</div><div class="line"></div><div class="line">-x 将范围局限在现行的文件系统中，若指定目录下的某些子目录，其存放于另一个文件系统上，则将该子目录予以排除在寻找范围外。</div></pre></td></tr></table></figure>
<h2 id="Used"><a href="#Used" class="headerlink" title="Used"></a>Used</h2><p>下面是我生成上面的结构所用的命令，大家可以参考下</p>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">tree -I <span class="string">'node_modules|dist|*.mp3|*.jpg'</span> <span class="_">-f</span></div></pre></td></tr></table></figure>
<h2 id="Over"><a href="#Over" class="headerlink" title="Over"></a>Over</h2><p>新技能<code>Get</code>！</p>
]]></content>
    
    <summary type="html">
    
      &lt;h2 id=&quot;Tree命令&quot;&gt;&lt;a href=&quot;#Tree命令&quot; class=&quot;headerlink&quot; title=&quot;Tree命令&quot;&gt;&lt;/a&gt;Tree命令&lt;/h2&gt;&lt;blockquote&gt;
&lt;p&gt;本文写给不知所云的小白，知道的就当回忆一下啦！&lt;/p&gt;
&lt;/blockquote&gt;
    
    </summary>
    
      <category term="Node" scheme="http://wodewone.com/categories/Node/"/>
    
    
      <category term="Node" scheme="http://wodewone.com/tags/Node/"/>
    
      <category term="tree" scheme="http://wodewone.com/tags/tree/"/>
    
  </entry>
  
  <entry>
    <title>Fetch (现代版 ajax ES6)</title>
    <link href="http://wodewone.com/2016/12/20/this-api-is-so-fetching/"/>
    <id>http://wodewone.com/2016/12/20/this-api-is-so-fetching/</id>
    <published>2016-12-20T02:43:44.000Z</published>
    <updated>2016-12-20T03:14:20.000Z</updated>
    
    <content type="html"><![CDATA[<blockquote>
<p>原文：<a href="https://www.w3ctech.com/topic/854" target="_blank" rel="external">【翻译】这个API很“迷人”——(新的Fetch API)</a></p>
</blockquote>
<p><strong>原标题是This API is So Fetching，Fetching也可以表示迷人的意思——译者注</strong></p>
<p>JavaScript 通过XMLHttpRequest(XHR)来执行异步请求，这个方式已经存在了很长一段时间。虽说它很有用，但它不是最佳API。它在设计上不符合职责分离原则，将输入、输出和用事件来跟踪的状态混杂在一个对象里。而且，基于事件的模型与最近JavaScript流行的Promise以及基于生成器的异步编程模型不太搭（事件模型在处理异步上有点过时了——译者注）。</p>
<p>新的 <a href="https://developer.mozilla.org/en-US/docs/Web/API/Fetch_API" target="_blank" rel="external">Fetch</a> API打算修正上面提到的那些缺陷。 它向JS中引入和HTTP协议中同样的原语（即Fetch——译者注）。具体而言，它引入一个实用的函数<code>fetch()</code>用来简洁捕捉从网络上检索一个资源的意图。</p>
<p><a href="https://fetch.spec.whatwg.org/" target="_blank" rel="external">Fetch 规范</a>的API明确了用户代理获取资源的语义。它结合ServiceWorkers，尝试达到以下优化：</p>
<ol>
<li>改善离线体验</li>
<li>保持可扩展性</li>
</ol>
<p>到写这篇文章的时候，Fetch API被Firefox 39（Nightly版）以及Chrome 42（开发版）支持。在github上，有基于低版本浏览器的<a href="https://github.com/github/fetch" target="_blank" rel="external">兼容实现</a></p>
<h2 id="特性检测"><a href="#特性检测" class="headerlink" title="特性检测"></a>特性检测</h2><p>要检查是否支持Fetch API，可以通过检查 Headers, Request, Response 或者 fetch 在 window 或者 worker 作用域中是否存在。</p>
<h2 id="简单的fetching示例"><a href="#简单的fetching示例" class="headerlink" title="简单的fetching示例"></a>简单的fetching示例</h2><p>在Fetch API中，最常用的就是fetch()函数。它接收一个URL参数，返回一个promise来处理response。response参数带着一个Response对象。</p>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div></pre></td><td class="code"><pre><div class="line">fetch(<span class="string">"/data.json"</span>).then(<span class="function"><span class="keyword">function</span>(<span class="params">res</span>) </span>&#123;</div><div class="line">  <span class="comment">// res instanceof Response == true.</span></div><div class="line">  <span class="keyword">if</span> (res.ok) &#123;</div><div class="line">    res.json().then(<span class="function"><span class="keyword">function</span>(<span class="params">data</span>) </span>&#123;</div><div class="line">      <span class="built_in">console</span>.log(data.entries);</div><div class="line">    &#125;);</div><div class="line">  &#125; <span class="keyword">else</span> &#123;</div><div class="line">    <span class="built_in">console</span>.log(<span class="string">"Looks like the response wasn't perfect, got status"</span>, res.status);</div><div class="line">  &#125;</div><div class="line">&#125;, <span class="function"><span class="keyword">function</span>(<span class="params">e</span>) </span>&#123;</div><div class="line">  <span class="built_in">console</span>.log(<span class="string">"Fetch failed!"</span>, e);</div><div class="line">&#125;);</div></pre></td></tr></table></figure>
<p>如果是提交一个POST请求，代码如下：</p>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div></pre></td><td class="code"><pre><div class="line">fetch(<span class="string">"http://www.example.org/submit.php"</span>, &#123;</div><div class="line">  <span class="attr">method</span>: <span class="string">"POST"</span>,</div><div class="line">  <span class="attr">headers</span>: &#123;</div><div class="line">    <span class="string">"Content-Type"</span>: <span class="string">"application/x-www-form-urlencoded"</span></div><div class="line">  &#125;,</div><div class="line">  <span class="attr">body</span>: <span class="string">"firstName=Nikhil&amp;favColor=blue&amp;password=easytoguess"</span></div><div class="line">&#125;).then(<span class="function"><span class="keyword">function</span>(<span class="params">res</span>) </span>&#123;</div><div class="line">  <span class="keyword">if</span> (res.ok) &#123;</div><div class="line">    alert(<span class="string">"Perfect! Your settings are saved."</span>);</div><div class="line">  &#125; <span class="keyword">else</span> <span class="keyword">if</span> (res.status == <span class="number">401</span>) &#123;</div><div class="line">    alert(<span class="string">"Oops! You are not authorized."</span>);</div><div class="line">  &#125;</div><div class="line">&#125;, <span class="function"><span class="keyword">function</span>(<span class="params">e</span>) </span>&#123;</div><div class="line">  alert(<span class="string">"Error submitting form!"</span>);</div><div class="line">&#125;);</div></pre></td></tr></table></figure>
<p>fetch()函数的参数和传给Request()构造函数的参数保持完全一致，所以你可以直接传任意复杂的request请求给fetch()。</p>
<h2 id="Headers"><a href="#Headers" class="headerlink" title="Headers"></a>Headers</h2><p>Fetch引入了3个接口，它们分别是 Headers,Request 以及 Response 。他们直接对应了相应的HTTP概念，但是基于安全考虑，有些区别，例如支持CORS规则以及保证cookies不能被第三方获取。</p>
<p>Headers接口是一个简单的多映射的名-值表</p>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">var</span> content = <span class="string">"Hello World"</span>;</div><div class="line"><span class="keyword">var</span> reqHeaders = <span class="keyword">new</span> Headers();</div><div class="line">reqHeaders.append(<span class="string">"Content-Type"</span>, <span class="string">"text/plain"</span>);</div><div class="line">reqHeaders.append(<span class="string">"Content-Length"</span>, content.length.toString());</div><div class="line">reqHeaders.append(<span class="string">"X-Custom-Header"</span>, <span class="string">"ProcessThisImmediately"</span>);</div></pre></td></tr></table></figure>
<p>也可以传一个多维数组或者json：</p>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line">reqHeaders = <span class="keyword">new</span> Headers(&#123;</div><div class="line">  <span class="string">"Content-Type"</span>: <span class="string">"text/plain"</span>,</div><div class="line">  <span class="string">"Content-Length"</span>: content.length.toString(),</div><div class="line">  <span class="string">"X-Custom-Header"</span>: <span class="string">"ProcessThisImmediately"</span>,</div><div class="line">&#125;);</div></pre></td></tr></table></figure>
<p>Headers的内容可以被检索：</p>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div></pre></td><td class="code"><pre><div class="line"><span class="built_in">console</span>.log(reqHeaders.has(<span class="string">"Content-Type"</span>)); <span class="comment">// true</span></div><div class="line"><span class="built_in">console</span>.log(reqHeaders.has(<span class="string">"Set-Cookie"</span>)); <span class="comment">// false</span></div><div class="line">reqHeaders.set(<span class="string">"Content-Type"</span>, <span class="string">"text/html"</span>);</div><div class="line">reqHeaders.append(<span class="string">"X-Custom-Header"</span>, <span class="string">"AnotherValue"</span>);</div><div class="line"></div><div class="line"><span class="built_in">console</span>.log(reqHeaders.get(<span class="string">"Content-Length"</span>)); <span class="comment">// 11</span></div><div class="line"><span class="built_in">console</span>.log(reqHeaders.getAll(<span class="string">"X-Custom-Header"</span>)); <span class="comment">// ["ProcessThisImmediately", "AnotherValue"]</span></div><div class="line"></div><div class="line">reqHeaders.delete(<span class="string">"X-Custom-Header"</span>);</div><div class="line"><span class="built_in">console</span>.log(reqHeaders.getAll(<span class="string">"X-Custom-Header"</span>)); <span class="comment">// []</span></div></pre></td></tr></table></figure>
<p>一些操作不仅仅对ServiceWorkers有用，本身也提供了更方便的操作Headers的API（相对于XMLHttpRequest来说——译者注）。</p>
<p>由于Headers可以在request请求中被发送或者在response请求中被接收，并且规定了哪些参数是可写的，Headers对象有一个特殊的<strong>guard</strong>属性。这个属性没有暴露给Web，但是它影响到哪些内容可以在Headers对象中被改变。</p>
<p>可能的值如下：</p>
<ul>
<li>“none”: 默认的</li>
<li>“request”: 从Request中获得的Headers只读。</li>
<li>“request-no-cors”：从不同域的Request中获得的Headers只读。</li>
<li>“response”: 从Response获得的Headers只读。</li>
<li>“immutable” 在ServiceWorkers中最常用的，所有的Headers都只读。</li>
</ul>
<p>哪一种 guard 作用于 Headers 导致什么行为，详细定义在了这个<a href="https://fetch.spec.whatwg.org/" target="_blank" rel="external">规范</a>中。例如，你不可以添加或者修改一个guard属性是”request”的Request Headers的”Content-Length”属性。同样地，插入”Set-Cookie”属性到一个Response headers是不允许的，因此ServiceWorkers是不能给合成的Response的headers添加一些cookies。</p>
<p>如果使用了一个不合法的HTTP Header属性名，那么Headers的方法通常都抛出 TypeError 异常。如果不小心写入了一个不可写的属性，也会抛出一个 TypeError 异常。除此以外的情况，失败了并不抛出异常。例如：</p>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">var</span> res = Response.error();</div><div class="line"><span class="keyword">try</span> &#123;</div><div class="line">  res.headers.set(<span class="string">"Origin"</span>, <span class="string">"http://mybank.com"</span>);</div><div class="line">&#125; <span class="keyword">catch</span>(e) &#123;</div><div class="line">  <span class="built_in">console</span>.log(<span class="string">"Cannot pretend to be a bank!"</span>);</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<h2 id="Request"><a href="#Request" class="headerlink" title="Request"></a>Request</h2><p>Request接口定义了通过HTTP请求资源的request格式。参数需要URL、method和headers，同时Request也接受一个特定的body，mode，credentials以及cache hints.</p>
<p>最简单的 Request 当然是一个URL，可以通过URL来GET一个资源。</p>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">var</span> req = <span class="keyword">new</span> Request(<span class="string">"/index.html"</span>);</div><div class="line"><span class="built_in">console</span>.log(req.method); <span class="comment">// "GET"</span></div><div class="line"><span class="built_in">console</span>.log(req.url); <span class="comment">// "http://example.com/index.html"</span></div></pre></td></tr></table></figure>
<p>你也可以将一个建好的Request对象传给构造函数，这样将复制出一个新的Request。</p>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">var</span> copy = <span class="keyword">new</span> Request(req);</div><div class="line"><span class="built_in">console</span>.log(copy.method); <span class="comment">// "GET"</span></div><div class="line"><span class="built_in">console</span>.log(copy.url); <span class="comment">// "http://example.com/index.html"</span></div></pre></td></tr></table></figure>
<p>这种用法通常见于ServiceWorkers。</p>
<p>URL以外的其他属性的初始值能够通过第二个参数传给Request构造函数。这个参数是一个json：</p>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">var</span> uploadReq = <span class="keyword">new</span> Request(<span class="string">"/uploadImage"</span>, &#123;</div><div class="line">  <span class="attr">method</span>: <span class="string">"POST"</span>,</div><div class="line">  <span class="attr">headers</span>: &#123;</div><div class="line">    <span class="string">"Content-Type"</span>: <span class="string">"image/png"</span>,</div><div class="line">  &#125;,</div><div class="line">  <span class="attr">body</span>: <span class="string">"image data"</span></div><div class="line">&#125;);</div></pre></td></tr></table></figure>
<p><code>mode</code>属性用来决定是否允许跨域请求，以及哪些response属性可读。可选的mode属性值为<code>same-origin</code>，<code>no-cors</code>（默认）以及<code>cors</code>。</p>
<p><code>same-origin</code>模式很简单，如果一个请求是跨域的，那么返回一个简单的error，这样确保所有的请求遵守同源策略。</p>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">var</span> arbitraryUrl = <span class="built_in">document</span>.getElementById(<span class="string">"url-input"</span>).value;</div><div class="line">fetch(arbitraryUrl, &#123; <span class="attr">mode</span>: <span class="string">"same-origin"</span> &#125;).then(<span class="function"><span class="keyword">function</span>(<span class="params">res</span>) </span>&#123;</div><div class="line">  <span class="built_in">console</span>.log(<span class="string">"Response succeeded?"</span>, res.ok);</div><div class="line">&#125;, <span class="function"><span class="keyword">function</span>(<span class="params">e</span>) </span>&#123;</div><div class="line">  <span class="built_in">console</span>.log(<span class="string">"Please enter a same-origin URL!"</span>);</div><div class="line">&#125;);</div></pre></td></tr></table></figure>
<p><code>no-cors</code>模式允许来自CDN的脚本、其他域的图片和其他一些跨域资源，但是首先有个前提条件，就是请求的method只能是”HEAD”,”GET”或者”POST”。此外，任何 ServiceWorkers 拦截了这些请求，它不能随意添加或者改写任何headers，除了<a href="https://fetch.spec.whatwg.org/#simple-header" target="_blank" rel="external">这些</a>。第三，JavaScript不能访问Response中的任何属性，这保证了 ServiceWorkers 不会导致任何跨域下的安全问题而隐私信息泄漏。</p>
<p><code>cors</code>模式我们通常用作跨域请求来从第三方提供的API获取数据。这个模式遵守<a href="https://developer.mozilla.org/en-US/docs/Web/HTTP/Access_control_CORS" target="_blank" rel="external">CORS协议</a>。只有有限的<a href="https://fetch.spec.whatwg.org/#concept-filtered-response-cors" target="_blank" rel="external">一些</a>headers被暴露给Response对象，但是body是可读的。例如，你可以获得一个Flickr的<a href="https://www.flickr.com/services/api/flickr.interestingness.getList.html" target="_blank" rel="external">最感兴趣的照片</a>的清单：</p>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">var</span> u = <span class="keyword">new</span> URLSearchParams();</div><div class="line">u.append(<span class="string">'method'</span>, <span class="string">'flickr.interestingness.getList'</span>);</div><div class="line">u.append(<span class="string">'api_key'</span>, <span class="string">'&lt;insert api key here&gt;'</span>);</div><div class="line">u.append(<span class="string">'format'</span>, <span class="string">'json'</span>);</div><div class="line">u.append(<span class="string">'nojsoncallback'</span>, <span class="string">'1'</span>);</div><div class="line"></div><div class="line"><span class="keyword">var</span> apiCall = fetch(<span class="string">'https://api.flickr.com/services/rest?'</span> + u);</div><div class="line"></div><div class="line">apiCall.then(<span class="function"><span class="keyword">function</span>(<span class="params">response</span>) </span>&#123;</div><div class="line">  <span class="keyword">return</span> response.json().then(<span class="function"><span class="keyword">function</span>(<span class="params">json</span>) </span>&#123;</div><div class="line">    <span class="comment">// photo is a list of photos.</span></div><div class="line">    <span class="keyword">return</span> json.photos.photo;</div><div class="line">  &#125;);</div><div class="line">&#125;).then(<span class="function"><span class="keyword">function</span>(<span class="params">photos</span>) </span>&#123;</div><div class="line">  photos.forEach(<span class="function"><span class="keyword">function</span>(<span class="params">photo</span>) </span>&#123;</div><div class="line">    <span class="built_in">console</span>.log(photo.title);</div><div class="line">  &#125;);</div><div class="line">&#125;);</div></pre></td></tr></table></figure>
<p>你无法从Headers中读取”Date”属性，因为Flickr在Access-Control-Expose-Headers中设置了不允许读取它。</p>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">response.headers.get(<span class="string">"Date"</span>); <span class="comment">// null</span></div></pre></td></tr></table></figure>
<p><code>credentials</code>枚举属性决定了cookies是否能跨域得到。这个属性与XHR的withCredentials标志相同，但是只有三个值，分别是”omit”（默认）,”same-origin”以及”include”。</p>
<p>Request对象也可以提供 caching hints 给用户代理。这个属性还在安全复审阶段。Firefox 提供了这个属性，但是它目前还不起作用。</p>
<p>Request还有两个只读的属性与ServiceWorks拦截有关。其中一个是referrer，表示Request的来源，可能为空。另外一个是context，是一个非常大的枚举集合定义了获得的资源的种类，它可能是<code>image</code>比如请求来自于img标签，可能是<code>worker</code>如果是一个worker脚本，等等。如果使用fetch()函数，这个值是<code>fetch</code>。</p>
<h2 id="Response"><a href="#Response" class="headerlink" title="Response"></a>Response</h2><p>Response实例通常在fetch()的回调中获得。但是它们也可以用JS构造，不过通常这招只用于ServiceWorkers。</p>
<p>Response中最常见的成员是status（一个整数默认值是200）和statusText（默认值是”OK”），对应HTTP请求的status和reason。还有一个”ok”属性，当status为2xx的时候它是true。</p>
<p>headers 属性是Response的Headers对象，它是只读的(with guard “response”)，url属性是当前Response的来源URL。</p>
<p>Response 也有一个type属性，它的值可能是”basic”,”cors”,”default”,”error”或者”opaque。</p>
<ul>
<li>“basic”: 正常的，同域的请求，包含所有的headers除开”Set-Cookie”和”Set-Cookie2”。</li>
<li>“cors”: Response从一个合法的跨域请求获得，<a href="https://fetch.spec.whatwg.org/#concept-filtered-response-cors" target="_blank" rel="external">一部分header和body</a>可读。</li>
<li>“error”: 网络错误。Response的status是0，Headers是空的并且不可写。当Response是从Response.error()中得到时，就是这种类型。</li>
<li>“opaque”: Response从”no-cors”请求了跨域资源。依靠Server端来做限制。</li>
</ul>
<p>“error”类型会导致fetch()函数的Promise被reject并回调出一个TypeError。</p>
<p>还有一些属性只在ServerWorker作用域下有效。以正确的方式 返回一个Response针对一个被ServiceWorkers拦截的Request，可以像下面这样写：</p>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line">addEventListener(<span class="string">'fetch'</span>, <span class="function"><span class="keyword">function</span>(<span class="params">event</span>) </span>&#123;</div><div class="line">  event.respondWith(<span class="keyword">new</span> Response(<span class="string">"Response body"</span>, &#123;</div><div class="line">    <span class="attr">headers</span>: &#123; <span class="string">"Content-Type"</span> : <span class="string">"text/plain"</span> &#125;</div><div class="line">  &#125;);</div><div class="line">&#125;);</div></pre></td></tr></table></figure>
<p>如你所见，Response有个接收两个可选参数的构造器。第一个参数是返回的body，第二个参数是一个json，设置status、statusText以及headers。</p>
<p>静态方法Response.error()简单返回一个错误的请求。类似的，Response.redirect(url, status)返回一个跳转URL的请求。</p>
<h3 id="处理body"><a href="#处理body" class="headerlink" title="处理body"></a>处理body</h3><p>无论Request还是Response都可能带着body。由于body可以是各种类型，比较复杂，所以前面我们故意先略过它，在这里单独拿出来讲解。</p>
<p>body可以是以下任何一种类型的实例：</p>
<ul>
<li><a href="https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/ArrayBuffer" target="_blank" rel="external">ArrayBuffer</a></li>
<li><a href="https://developer.mozilla.org/en-US/docs/Web/API/ArrayBufferView" target="_blank" rel="external">ArrayBufferView</a>(Uint8Array and friends)</li>
<li><a href="https://developer.mozilla.org/en-US/docs/Web/API/Blob" target="_blank" rel="external">Blob</a>/<a href="https://developer.mozilla.org/en-US/docs/Web/API/File" target="_blank" rel="external">File</a></li>
<li>字符串</li>
<li><a href="https://url.spec.whatwg.org/#interface-urlsearchparams" target="_blank" rel="external">URLSearchParams</a></li>
<li><a href="https://developer.mozilla.org/en-US/docs/Web/API/FormData" target="_blank" rel="external">FormData</a>——目前不被Gecko和Blink支持，Firefox预计在版本39和Fetch的其他部分一起推出。</li>
</ul>
<p>此外，Request和Response都为他们的body提供了以下方法，这些方法都返回一个Promise对象。</p>
<ul>
<li>arrayBuffer()</li>
<li>blob()</li>
<li>json()</li>
<li>text()</li>
<li>formData()</li>
</ul>
<p>在使用非文本的数据方面，Fetch API和XHR相比提供了极大的便利。</p>
<p>可以通过传body参数来设置Request的body：</p>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">var</span> form = <span class="keyword">new</span> FormData(<span class="built_in">document</span>.getElementById(<span class="string">'login-form'</span>));</div><div class="line">fetch(<span class="string">"/login"</span>, &#123;</div><div class="line">  <span class="attr">method</span>: <span class="string">"POST"</span>,</div><div class="line">  <span class="attr">body</span>: form</div><div class="line">&#125;)</div></pre></td></tr></table></figure>
<p>Response的第一个参数是body：</p>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">var</span> res = <span class="keyword">new</span> Response(<span class="keyword">new</span> File([<span class="string">"chunk"</span>, <span class="string">"chunk"</span>], <span class="string">"archive.zip"</span>,</div><div class="line">                       &#123; <span class="attr">type</span>: <span class="string">"application/zip"</span> &#125;));</div></pre></td></tr></table></figure>
<p>Request和Response（通过fetch()方法）都能够<a href="https://fetch.spec.whatwg.org/#concept-bodyinit-extract" target="_blank" rel="external">自动识别自己的content type</a>，Request还可以自动设置”Content-Type” header，如果开发者没有设置它的话。</p>
<h2 id="流和克隆"><a href="#流和克隆" class="headerlink" title="流和克隆"></a>流和克隆</h2><p>非常重要的一点要说明，那就是Request和Response的body只能被读取一次！它们有一个属性叫bodyUsed，读取一次之后设置为true，就不能再读取了。</p>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">var</span> res = <span class="keyword">new</span> Response(<span class="string">"one time use"</span>);</div><div class="line"><span class="built_in">console</span>.log(res.bodyUsed); <span class="comment">// false</span></div><div class="line">res.text().then(<span class="function"><span class="keyword">function</span>(<span class="params">v</span>) </span>&#123;</div><div class="line">  <span class="built_in">console</span>.log(res.bodyUsed); <span class="comment">// true</span></div><div class="line">&#125;);</div><div class="line"><span class="built_in">console</span>.log(res.bodyUsed); <span class="comment">// true</span></div><div class="line"></div><div class="line">res.text().catch(<span class="function"><span class="keyword">function</span>(<span class="params">e</span>) </span>&#123;</div><div class="line">  <span class="built_in">console</span>.log(<span class="string">"Tried to read already consumed Response"</span>);</div><div class="line">&#125;);</div></pre></td></tr></table></figure>
<p>这样设计的目的是为了之后兼容基于流的API，让应用一次消费data，这样就允许了JavaScript处理大文件例如视频，并且可以支持实时压缩和编辑。</p>
<p>有时候，我们希望多次访问body，例如，你可能想用即将支持的<a href="http://slightlyoff.github.io/ServiceWorker/spec/service_worker/index.html#cache-objects" target="_blank" rel="external">Cache API</a>去缓存Request和Response，以便于可以离线使用，Cache要求body能被再次读取。</p>
<p>所以，我们该如何让body能经得起多次读取呢？API提供了一个clone()方法。调用这个方法可以得到一个克隆对象。不过要记得，clone()必须要在读取之前调用，也就是先clone()再读取。</p>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div></pre></td><td class="code"><pre><div class="line">addEventListener(<span class="string">'fetch'</span>, <span class="function"><span class="keyword">function</span>(<span class="params">evt</span>) </span>&#123;</div><div class="line">  <span class="keyword">var</span> sheep = <span class="keyword">new</span> Response(<span class="string">"Dolly"</span>);</div><div class="line">  <span class="built_in">console</span>.log(sheep.bodyUsed); <span class="comment">// false</span></div><div class="line">  <span class="keyword">var</span> clone = sheep.clone();</div><div class="line">  <span class="built_in">console</span>.log(clone.bodyUsed); <span class="comment">// false</span></div><div class="line"></div><div class="line">  clone.text();</div><div class="line">  <span class="built_in">console</span>.log(sheep.bodyUsed); <span class="comment">// false</span></div><div class="line">  <span class="built_in">console</span>.log(clone.bodyUsed); <span class="comment">// true</span></div><div class="line"></div><div class="line">  evt.respondWith(cache.add(sheep.clone()).then(<span class="function"><span class="keyword">function</span>(<span class="params">e</span>) </span>&#123;</div><div class="line">    <span class="keyword">return</span> sheep;</div><div class="line">  &#125;);</div><div class="line">&#125;);</div></pre></td></tr></table></figure>
<h2 id="未来的改进"><a href="#未来的改进" class="headerlink" title="未来的改进"></a>未来的改进</h2><p>为了支持流，Fetch最终将提供可以中断执行读取资源的能力，并且提供可以得到读取进度的API。这些能力在XHR中有，但是想要实现成Promise-based的Fetch API有些麻烦。</p>
<p>你可以加入<a href="https://whatwg.org/mailing-list" target="_blank" rel="external">WHATWG的邮件组</a>参与<a href="https://www.w3.org/Bugs/Public/buglist.cgi?product=WHATWG&amp;component=Fetch&amp;resolution=---" target="_blank" rel="external">Fetch</a>和<a href="https://github.com/slightlyoff/ServiceWorker/issues" target="_blank" rel="external">ServiceWorker</a>的讨论，为改进API贡献自己的力量。</p>
<p>为了创造更好的互联网而努力！</p>
<p>感谢 Andrea Marchesini, Anne van Kesteren 和 Ben Kelly 感谢他们对规范和实现所做的努力.</p>
<p><a href="https://css.w3ctech.com?v=topic" target="_blank" rel="external"><img src="https://img.w3ctech.com/cssconf.jpg" alt="第三届CSS大会"></a></p>
<h2 id="摘"><a href="#摘" class="headerlink" title="摘"></a>摘</h2><ul>
<li><p>摘自 -<br><a href="https://www.w3ctech.com/topic/854" target="_blank" rel="external">【翻译】这个API很“迷人”——(新的Fetch API)</a></p>
</li>
<li><p>原文翻译自 -<br><a href="https://hacks.mozilla.org/2015/03/this-api-is-so-fetching" target="_blank" rel="external">https://hacks.mozilla.org/2015/03/this-api-is-so-fetching</a></p>
</li>
</ul>
]]></content>
    
    <summary type="html">
    
      &lt;blockquote&gt;
&lt;p&gt;原文：&lt;a href=&quot;https://www.w3ctech.com/topic/854&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;【翻译】这个API很“迷人”——(新的Fetch API)&lt;/a&gt;&lt;/p&gt;
&lt;/blockq
    
    </summary>
    
      <category term="javascript" scheme="http://wodewone.com/categories/javascript/"/>
    
    
      <category term="javascript" scheme="http://wodewone.com/tags/javascript/"/>
    
      <category term="fetch" scheme="http://wodewone.com/tags/fetch/"/>
    
      <category term="ajax" scheme="http://wodewone.com/tags/ajax/"/>
    
      <category term="http" scheme="http://wodewone.com/tags/http/"/>
    
      <category term="es6" scheme="http://wodewone.com/tags/es6/"/>
    
      <category term="promise" scheme="http://wodewone.com/tags/promise/"/>
    
  </entry>
  
  <entry>
    <title>使用js创建macOS应用(更新:2017-02-18)</title>
    <link href="http://wodewone.com/2016/12/03/%E4%BD%BF%E7%94%A8js%E5%88%9B%E5%BB%BAmacOS%E5%BA%94%E7%94%A8/"/>
    <id>http://wodewone.com/2016/12/03/使用js创建macOS应用/</id>
    <published>2016-12-03T14:28:29.000Z</published>
    <updated>2017-02-24T10:35:14.000Z</updated>
    
    <content type="html"><![CDATA[<h2 id="序言"><a href="#序言" class="headerlink" title="序言"></a>序言</h2><p>因为自己不大喜欢喜欢用手机，所以当在手机上看到有些应用只能在手机上使用时觉得好别扭，但是自己也不是写原生应用的人，怎么办呢~<br>那么问题来了，这个世界上还有 js 不能干的事情吗，js 都能写移动应用了，那能不能用来写桌面应用呢，于世~带着疑问还是 google 然后发现了有意思的了；<br>原来早就有解决方案了，早在<code>Node.js</code>问世不久之后就出现了 <code>NW.js</code> 这么个东西，但是我们这里不讨论他，哈哈~<br>为啥呢？因为出现了更好的~ <code>electron</code> 它的前身是 <code>Atom Shell</code> 关于更多细致的内容可以访问官网<a href="http://electron.atom.io/" target="_blank" rel="external">Electron</a>或自行搜索；<br>目前使用 <code>electron</code> 已经构建出来的比较出名的 Atom编辑器</p>
<p>可以去官网看下</p>
<p><a href="https://atom.io/" target="_blank" rel="external"><img src="http://electron.atom.io/images/apps/atom-icon.png" alt="Atom"></a></p>
<h2 id="资料准备"><a href="#资料准备" class="headerlink" title="资料准备"></a>资料准备</h2><h3 id="平台准备"><a href="#平台准备" class="headerlink" title="平台准备"></a>平台准备</h3><blockquote>
<p>熟悉electron 的 api 接口，然后配合其他教程熟悉了一下接口的使用</p>
</blockquote>
<ul>
<li><a href="http://www.w3cschool.cn/electronmanual/electronmanual-tray.html" target="_blank" rel="external">w3cschool Electron 中文 API</a></li>
<li><a href="https://zhuanlan.zhihu.com/p/20225295" target="_blank" rel="external">使用 Electron 构建桌面应用</a></li>
</ul>
<p><em>2016-12-05</em></p>
<h3 id="搭建项目脚手架"><a href="#搭建项目脚手架" class="headerlink" title="搭建项目脚手架"></a>搭建项目脚手架</h3><blockquote>
<p>配置环境，搭建项目结构<br>Q：框架选型？</p>
<p>由于之前用了 <code>angular</code> 觉得，虽然他是比较好用（由于 <code>angular</code> 是我接触的第一个 MVVM 类型框架，额，虽然用了一段日子了，但是对他真的把控不了，可能是 <code>jQuery</code> 已经深深的印刻在心里了把，哈哈）可以说这种框架才是真正的框架。之前一直觉得<code>jQuery</code> 和 <code>zepto</code> 这种历任几朝几代的元老级对于你已经足够了，哈哈，但是接触 <code>angualr</code> 之后你会懂的什么才叫框架！有兴趣的可以自己去尝试一下，把它用在你的下一个项目里面，当然如果合适的话，对于 web 项目从来就没有一个最好的框架，只有最合适的框架，因为即使你不用任何框架一样可以完成~~</p>
<p>因为之前用 <code>angular</code> 开发微信应用的经历让我一直觉得 <code>angular</code> 实在是太难把控了，因为具体写的时候有些问题还是很痛苦的（具体问题已经记不清了，只能想起来，有段时间我很痛苦~）</p>
<p>再加上现在 <code>React</code> 真的火的不行的，我决定入手~（因为种种原因，之前一直没有用上）</p>
</blockquote>
<p>当前决定：</p>
<p><code>Webpack</code> + <code>Babel</code> + <code>React</code> + <code>css-modules</code></p>
<ul>
<li><a href="http://www.jianshu.com/p/4c61da559d75" target="_blank" rel="external">React Native填坑之旅–HTTP请求篇</a></li>
<li><a href="http://cn.vuejs.org" target="_blank" rel="external">VueJs</a></li>
<li><a href="https://segmentfault.com/a/1190000005013207" target="_blank" rel="external">React 最佳实践——那些 React 没告诉你但很重要的事</a></li>
</ul>
<p><em>2016-12-06</em></p>
<h3 id="使用react-css-module"><a href="#使用react-css-module" class="headerlink" title="使用react-css-module"></a>使用react-css-module</h3><p>使用 <code>css module</code> 的时候，每个 <code>className</code> 都要 <code>styles.**</code> 很麻烦，<br>然后，然后就出现了 <code>react-css-module</code> 可以使用 <code>styleName</code> 来代替 ‘className’，这样就不需要每次都去写 <code>{styles.**}</code> 这样麻烦了，然后也不用必须使用驼峰式写法了（其实是因为不喜欢驼峰式命名 <code>css</code> ，哈哈，可能是因为 BEM 的关系），然后还可以使用多个 <code>class</code> 很方便~</p>
<p>但是使用 <code>react-css-module</code> 每次 export 都要手动指定，例如下面：</p>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">import</span> React <span class="keyword">from</span> <span class="string">'react'</span>;</div><div class="line"><span class="keyword">import</span> CSSModules <span class="keyword">from</span> <span class="string">'react-css-modules'</span>;</div><div class="line"><span class="keyword">import</span> styles <span class="keyword">from</span> <span class="string">'./App.css'</span>;</div><div class="line"></div><div class="line"><span class="class"><span class="keyword">class</span> <span class="title">App</span> <span class="keyword">extends</span> <span class="title">React</span>.<span class="title">Component</span> </span>&#123;</div><div class="line">    render () &#123;</div><div class="line">        <span class="keyword">return</span> (</div><div class="line">        <span class="xml"><span class="tag">&lt;<span class="name">div</span> <span class="attr">styleName</span>=<span class="string">'container'</span>&gt;</span></span></div><div class="line">        <span class="tag">&lt;/<span class="name">div</span>&gt;</span></div><div class="line">        );</div><div class="line">    &#125;</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="keyword">export</span> <span class="keyword">default</span> CSSModules(App, styles);</div></pre></td></tr></table></figure>
<p>每个组件都要加上 <code>CSSModules(App, styles)</code> 我觉得很啰嗦~<br>还好 <code>react-css-module</code> 支持 ES7（暂称 ES7 吧，虽然还是草案） 的<code>Decorators</code> 语法，然后你可以这样写：</p>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">import</span> React <span class="keyword">from</span> <span class="string">'react'</span>;</div><div class="line"><span class="keyword">import</span> CSSModules <span class="keyword">from</span> <span class="string">'react-css-modules'</span>;</div><div class="line"><span class="keyword">import</span> styles <span class="keyword">from</span> <span class="string">'./App.css'</span>;</div><div class="line"></div><div class="line">@CSSModules(styles)</div><div class="line"><span class="class"><span class="keyword">class</span> <span class="title">App</span> <span class="keyword">extends</span> <span class="title">React</span>.<span class="title">Component</span> </span>&#123;</div><div class="line">    render () &#123;</div><div class="line">        <span class="keyword">return</span> (</div><div class="line">        <span class="xml"><span class="tag">&lt;<span class="name">div</span> <span class="attr">styleName</span>=<span class="string">'container'</span>&gt;</span></span></div><div class="line">        <span class="tag">&lt;/<span class="name">div</span>&gt;</span></div><div class="line">        );</div><div class="line">    &#125;</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="keyword">export</span> <span class="keyword">default</span> App;</div></pre></td></tr></table></figure>
<p>个人感觉这样感觉很好（至少有点逼格，哈哈）</p>
<p>但是最新的 <code>Babel v6</code> 中不知道为啥居然去掉了对 <code>Decorators</code> 的支持（详情点击<a href="http://babeljs.io/docs/plugins/transform-decorators/" target="_blank" rel="external">Babel 官网</a>）查看），官方解释：</p>
<blockquote>
<p><strong>Decorators are not currently supported</strong><br>Decorators are disabled in Babel v6, pending a proposal update – see babel/babel#2645.</p>
</blockquote>
<p>Until Babel officially supports decorators again, you might want to try the third-party transform-decorators-legacy plugin, or use Babel v5.</p>
<p>大概意思是说在babel 6里面暂时去掉了对 <code>Decorators</code> 的支持，然后要编译 <code>Decorators</code> 的话要使用第三方的拓展插件<a href="https://github.com/loganfsmyth/babel-plugin-transform-decorators-legacy" target="_blank" rel="external">babel-plugin-transform-decorators-legacy</a></p>
<ul>
<li><a href="https://github.com/loganfsmyth/babel-plugin-transform-decorators-legacy" target="_blank" rel="external">Babel Legacy Decorator plugin</a></li>
<li><a href="http://babeljs.io/docs/plugins/transform-decorators/" target="_blank" rel="external">Decorators transform</a></li>
</ul>
<h3 id="技术积累"><a href="#技术积累" class="headerlink" title="技术积累"></a>技术积累</h3><blockquote>
<p>Q：项目结构是怎样的？<br>Q：<code>webpack</code> 的配置是怎样的？<br>Q： <code>cssModules</code> 是怎么使用以及怎么搭配其他 <code>css</code> 处理器(如 <code>sass</code>、<code>less</code>、<code>postcss</code> 等)?<br>Q：我应该安装哪些 <code>webpack</code> 插件 and 这些插件该如何配置？<br>Q：开发环境又是怎样？需要热部署吗？</p>
<p>带着这些疑问往后走把~</p>
</blockquote>
<p><em>2016-12-07</em></p>
<h3 id="分析-API-接口数据"><a href="#分析-API-接口数据" class="headerlink" title="分析 API 接口数据"></a>分析 API 接口数据</h3><blockquote>
<p>Q：如何存取 <code>Token</code> 内容，如何更新 <code>Token</code> 值？<br>分析 <code>token</code> 加密规则（如何传递<code>token</code>获取数据）</p>
</blockquote>
<p>参考内容：<br><a href="http://solee.me/2016/02/01/jwt-ren-zheng-mo-shi-jian-dan-miao-shu/#open" target="_blank" rel="external">JWT 认证模式简单描述</a></p>
<p><em>2016-12-13</em></p>
<h3 id="离线存储"><a href="#离线存储" class="headerlink" title="离线存储"></a>离线存储</h3><blockquote>
<p>Q：如何将下载资源存储到本地，在无网络情况下依然可以使用？<br>此问题将稍晚更新</p>
</blockquote>
<p><em>2017-02-13</em></p>
<h3 id="electron-打包-app"><a href="#electron-打包-app" class="headerlink" title="electron 打包 app"></a>electron 打包 app</h3><blockquote>
<p>我这里使用的是自动打包，手动打包方式请自行Google搜索~</p>
</blockquote>
<p>比较好用的自动打包方式：</p>
<ul>
<li>electron-packager [未使用]</li>
<li>electron-builder [使用]</li>
</ul>
<p>这里做一下简单的比较：</p>
<p>electron-packager</p>
<ul>
<li>使用 electron-packager 打包，macOS系统打包app文件，不能打包exe文件，windows系统可以打包app文件以及exe文件；</li>
<li>支持平台有：Windows (32/64 bit)、OS X (also known as macOS)、Linux (x86/x86_64)；</li>
<li>生成的格式：.exe（这里不能生成安装包，只能生成可执行文件及目录）、.app、mas、linux可执行格式；</li>
<li>支持CLI和JS API两种使用方式；</li>
</ul>
<p>electron-builder</p>
<ul>
<li>electron-builder 可以打包成msi、exe、dmg文件，macOS系统，只能打包dmg文件，window系统才能打包exe，msi文件；</li>
<li>几乎支持了所有平台的所有格式；</li>
<li>可以将prepackage目录（手动或使用electron-packager生成的目录）打包成安装包；</li>
<li>支持<a href="https://github.com/electron-userland/electron-builder/wiki/Auto-Update" target="_blank" rel="external">Auto Update</a>；</li>
<li>同样支持CLI和JS API两种使用方式；</li>
</ul>
<h4 id="electron-builder-使用"><a href="#electron-builder-使用" class="headerlink" title="electron-builder 使用"></a>electron-builder 使用</h4><p><a href="https://github.com/electron-userland/electron-builder/" target="_blank" rel="external">electron-builder使用说明</a></p>
<p>安装<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">npm i --save-dev electron-builder</div></pre></td></tr></table></figure></p>
<blockquote>
<p>注：确保你的package.json中包含这些字段：name, description, version and author。</p>
</blockquote>
<p>然后在<code>pacpackage.json</code>中添加<code>build</code>属性：</p>
<figure class="highlight"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div></pre></td><td class="code"><pre><div class="line">"build": &#123;</div><div class="line">  "appId": "your.id", (需要发布store的需要注册一下，我这里随便填了一个)</div><div class="line">  "mac": &#123;</div><div class="line">    "category": "your.app.category.type"</div><div class="line">  &#125;,</div><div class="line">  "win": &#123;</div><div class="line">    "iconUrl": "(windows-only) https link to icon"</div><div class="line">  &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>然后再添加两个script命令：</p>
<figure class="highlight"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line">"scripts": &#123;</div><div class="line">  "pack": "build --dir",</div><div class="line">  "dist": "build"</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>在要打包的项目根目录下建立build文件夹，其中存放三个图片：</p>
<ol>
<li>background.png (macOS DMG background)</li>
<li>icon.icns (macOS app icon)</li>
<li>icon.ico (Windows app icon)</li>
</ol>
<p>保存以上内容后，运行 <code>npm run dist</code></p>
<p>等命令执行完之后会在当前项目目录下生<code>dist</code>文件加里面包括：</p>
<ul>
<li>成可执行程序</li>
<li>安装包</li>
<li>zip包</li>
</ul>
<blockquote>
<p>到这里就完成了首次打包！<br>以上只是一个基本的打包过程，更多的配置可以参看<a href="https://github.com/electron-userland/electron-builder/wiki/Options" target="_blank" rel="external">api wiki</a></p>
</blockquote>
<h4 id="asar包"><a href="#asar包" class="headerlink" title="asar包"></a>asar包</h4><p>asar格式是Electron项目组推出的一种文件打包格式。<br>asar是一种将多个文件合并成一个文件的类tar风格的归档格式。 Electron可以无需解压，即从其中读取任意文件内容，甚至可以这么理解，把 <code>asar</code> 当成一个‘文件夹’，使用Node APIs中如<code>fs.readFile</code>或者<code>require</code>可以直接从里面读取文件，但不能写入）。</p>
<blockquote>
<p> 官方介绍：“An asar archive is a simple tar-like format that concatenates files into a single file. Electron can read arbitrary files from it without unpacking the whole file.”</p>
</blockquote>
<h5 id="示例"><a href="#示例" class="headerlink" title="示例"></a>示例</h5><p>假设我们在<code>/path/to</code>文件夹下有个<code>example.asar</code>包：</p>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line">$ asar list /path/to/example.asar</div><div class="line">/app.js</div><div class="line">/file.txt</div><div class="line">/dir/module.js</div><div class="line">/static/index.html</div><div class="line">/static/main.css</div><div class="line">/static/jquery.min.js</div></pre></td></tr></table></figure>
<p>从asar包读取一个文件：</p>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">const</span> fs = <span class="built_in">require</span>(<span class="string">'fs'</span>);</div><div class="line">fs.readFileSync(<span class="string">'/path/to/example.asar/file.txt'</span>);</div></pre></td></tr></table></figure>
<p>使用asar包中的一个模块：</p>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line"><span class="built_in">require</span>(<span class="string">'/path/to/example.asar/dir/module.js'</span>);</div></pre></td></tr></table></figure>
<p>你也可以使用BrowserWindow来显示一个asar包里的web页面：</p>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">const</span> BrowserWindow = <span class="built_in">require</span>(<span class="string">'electron'</span>).BrowserWindow;</div><div class="line"><span class="keyword">var</span> win = <span class="keyword">new</span> BrowserWindow(&#123;<span class="attr">width</span>: <span class="number">800</span>, <span class="attr">height</span>: <span class="number">600</span>&#125;);</div><div class="line">win.loadURL(<span class="string">'file:///path/to/example.asar/static/index.html'</span>);</div></pre></td></tr></table></figure>
<p><a href="https://xwartz.gitbooks.io/electron-gitbook/content/zh/tutorial/application-packaging.html" target="_blank" rel="external">更多详细内容以及介绍</a></p>
<h5 id="安装"><a href="#安装" class="headerlink" title="安装"></a>安装</h5><p><code>npm install -g asar</code></p>
<p><em>2017-02-18</em></p>
<h3 id="安装-Electron"><a href="#安装-Electron" class="headerlink" title="安装 Electron"></a>安装 Electron</h3><p>这里应该是放在前面的之所以在这里放着呢，是因为我到今天才 <code>install electron</code> 好它，因为 <code>electron</code> 的二进制文件太大（有110多M）在国内这个大小几乎是天文文件了，之前我是直接在 <code>github</code> 上载下来的，然后今天又用到了 <code>electron</code> 这个包就是引不进来，干脆在折腾一遍吧 233333<br>然后找啊找的找到了 <a href="http://blog.tomyail.com/install-electron-slow-in-china/" target="_blank" rel="external">加速electron在国内的下载速度</a> 这个，然后鱼块的下载好了</p>
<h2 id="所有参考内容"><a href="#所有参考内容" class="headerlink" title="所有参考内容"></a>所有参考内容</h2><p><strong>参考资料</strong></p>
<ul>
<li><a href="https://github.com/sindresorhus/awesome-electron" target="_blank" rel="external">开源electron App</a></li>
<li><a href="https://gold.xitu.io/entry/56aae5e4a633bd0257ae4ab8" target="_blank" rel="external">[译文] 通过 Electron 开发一个简单地桌面应用</a></li>
<li><a href="https://github.com/electron/electron/blob/master/docs-translations/zh-CN/tutorial/quick-start.md" target="_blank" rel="external">Electron 快速入门</a></li>
<li><a href="http://electron.atom.io/docs/api/" target="_blank" rel="external">Electron API</a></li>
<li><a href="https://wizardforcel.gitbooks.io/electron-doc/content/api" target="_blank" rel="external">Electron 中文文档</a></li>
<li><a href="https://github.com/electron/electron/tree/master/docs-translations/zh-CN" target="_blank" rel="external">Electron/docs-translations/zh-CN/</a></li>
<li><a href="http://www.w3cschool.cn/electronmanual/electronmanual-tray.html" target="_blank" rel="external">w3cschool Electron 中文 API</a></li>
<li><a href="https://github.com/electron/electron/tree/master/docs-translations/zh-CN" target="_blank" rel="external">Electron 文档</a></li>
<li><a href="http://taobaofed.org/blog/2016/01/07/find-back-the-lost-es6-features-in-nodejs/" target="_blank" rel="external">ES6转Node</a></li>
<li><a href="http://imweb.io/topic/582293894067ce9726778be9?utm_source=tuicool&amp;utm_medium=referral" target="_blank" rel="external">Node中没搞明白require和import，你会被坑的很惨</a></li>
<li><a href="https://zhuanlan.zhihu.com/p/20225295" target="_blank" rel="external">使用 Electron 构建桌面应用</a></li>
<li><a href="http://www.jianshu.com/p/4c61da559d75" target="_blank" rel="external">React Native填坑之旅–HTTP请求篇</a></li>
<li><a href="http://cn.vuejs.org" target="_blank" rel="external">VueJs</a></li>
<li><a href="https://github.com/ppoffice/Hozz" target="_blank" rel="external">Electron+react+webpack 构造跨平台自动更新host应用</a></li>
<li><a href="https://segmentfault.com/a/1190000005013207" target="_blank" rel="external">React 最佳实践——那些 React 没告诉你但很重要的事</a></li>
<li><a href="http://www.ruanyifeng.com/blog/2016/09/react-technology-stack.html" target="_blank" rel="external">阮一峰React项目脚手架</a></li>
<li><a href="https://github.com/camsong/blog/issues/5" target="_blank" rel="external">CSSModules详解及React中实践</a></li>
<li><a href="http://boke.io/tan-tan-css-modules/" target="_blank" rel="external">谈谈 CSS Modules</a></li>
<li><a href="http://www.cnblogs.com/wonyun/p/6030090.html" target="_blank" rel="external">html-webpack-plugin详解</a></li>
<li><a href="https://segmentfault.com/a/1190000005089993?utm_source=tuicool&amp;utm_medium=referral" target="_blank" rel="external">[译] Webpack——令人困惑的地方</a></li>
<li><a href="https://segmentfault.com/a/1190000004530909" target="_blank" rel="external">[译] react-css-modules</a></li>
<li><a href="https://segmentfault.com/a/1190000005969488" target="_blank" rel="external">使用 webpack + react + redux + es6 开发组件化前端项目</a></li>
<li><a href="http://bbs.reactnative.cn/topic/15/react-react-native-%E7%9A%84es5-es6%E5%86%99%E6%B3%95%E5%AF%B9%E7%85%A7%E8%A1%A8" target="_blank" rel="external">React/React Native 的ES5 ES6写法对照表</a></li>
<li><a href="https://segmentfault.com/a/1190000004660311" target="_blank" rel="external">使用 react-hot-loader</a></li>
<li><a href="http://stackoverflow.com/questions/37311972/react-doesnt-switch-to-production-mode" target="_blank" rel="external">React doesn’t switch to production mode</a></li>
<li><a href="http://www.alloyteam.com/2015/07/react-zu-jian-jian-tong-xin/#prettyPhoto" target="_blank" rel="external">react组件间通信</a></li>
<li><a href="https://github.com/github/fetch" target="_blank" rel="external">github/fetch</a></li>
<li><a href="http://blog.parryqiu.com/2016/03/02/using_fetch_in_nodejs/" target="_blank" rel="external">在 JS 中使用 fetch 更加高效地进行网络请求</a></li>
<li><a href="http://solee.me/2016/02/01/jwt-ren-zheng-mo-shi-jian-dan-miao-shu/#open" target="_blank" rel="external">JWT 认证模式简单描述</a></li>
<li><a href="http://www.haomou.net/2014/08/13/2014_bare_token/" target="_blank" rel="external">Bearer Token</a></li>
<li><a href="https://zhuanlan.zhihu.com/p/20381597?columnSlug=purerender" target="_blank" rel="external">深入理解 react-router 路由系统</a></li>
<li><a href="https://github.com/zhengweikeng/blog/issues/9" target="_blank" rel="external">webpack中关于样式的处理</a></li>
<li><a href="https://csspod.com/refactoring-react-components-to-es2015-classes/" target="_blank" rel="external">使用 ES2015 重构 React 组件
</a></li>
<li><a href="https://segmentfault.com/a/1190000006907701" target="_blank" rel="external">webpack多页应用架构系列（六）：听说webpack连图片和字体也能打包？</a></li>
<li><a href="http://blog.tomyail.com/install-electron-slow-in-china/" target="_blank" rel="external">加速electron在国内的下载速度</a></li>
<li><a href="https://github.com/zjzhome/I_want_to_say/issues/3" target="_blank" rel="external">深入Electron </a></li>
<li><a href="http://get.ftqq.com/7870.get#" target="_blank" rel="external">用Electron开发桌面应用</a></li>
<li><a href="http://web.jobbole.com/86509/" target="_blank" rel="external">用 Electron 打造跨平台前端 App</a></li>
<li><a href="https://github.com/Stuk/jszip" target="_blank" rel="external">JSZip</a></li>
<li><a href="http://ourjs.com/detail/56dab56c88feaf2d031d2484" target="_blank" rel="external">NodeJS 文件(夹)压缩/解压方案(zip/unzip)-Linux上zip相关命令</a></li>
<li><a href="http://stuk.github.io/jszip/documentation/api_jszip" target="_blank" rel="external">JSZip API</a></li>
<li><a href="https://github.com/sorrycc/blog/issues/13" target="_blank" rel="external">Electron 应用实战 (架构篇) </a></li>
<li><a href="http://mushanshitiancai.github.io/2017/02/11/js/electron/%E6%89%93%E5%8C%85Electron%E5%BA%94%E7%94%A8/" target="_blank" rel="external">打包Electron应用</a></li>
<li><a href="http://www.jianshu.com/p/1c2ad78df208" target="_blank" rel="external">常用Electron App打包工具</a></li>
<li><a href="https://github.com/webpack/webpack/issues/1599" target="_blank" rel="external">__dirname returns ‘/‘ when js file is built with webpack</a></li>
<li><a href="https://github.com/nukc/how-to-use-travis-ci" target="_blank" rel="external">如何简单入门使用Travis-CI持续集成</a></li>
<li><a href="https://docs.travis-ci.com/user/deployment/releases/" target="_blank" rel="external">Travis-CI - GitHub Releases Uploading</a></li>
</ul>
]]></content>
    
    <summary type="html">
    
      &lt;h2 id=&quot;序言&quot;&gt;&lt;a href=&quot;#序言&quot; class=&quot;headerlink&quot; title=&quot;序言&quot;&gt;&lt;/a&gt;序言&lt;/h2&gt;&lt;p&gt;因为自己不大喜欢喜欢用手机，所以当在手机上看到有些应用只能在手机上使用时觉得好别扭，但是自己也不是写原生应用的人，怎么办呢~&lt;br&gt;那么问题
    
    </summary>
    
      <category term="Mac" scheme="http://wodewone.com/categories/Mac/"/>
    
    
      <category term="javascript" scheme="http://wodewone.com/tags/javascript/"/>
    
      <category term="mac" scheme="http://wodewone.com/tags/mac/"/>
    
      <category term="css" scheme="http://wodewone.com/tags/css/"/>
    
      <category term="Node" scheme="http://wodewone.com/tags/Node/"/>
    
      <category term="webpack" scheme="http://wodewone.com/tags/webpack/"/>
    
      <category term="react" scheme="http://wodewone.com/tags/react/"/>
    
      <category term="cssModule" scheme="http://wodewone.com/tags/cssModule/"/>
    
      <category term="js" scheme="http://wodewone.com/tags/js/"/>
    
      <category term="electron" scheme="http://wodewone.com/tags/electron/"/>
    
  </entry>
  
  <entry>
    <title>使用modernizr处理IE兼容</title>
    <link href="http://wodewone.com/2016/12/01/%E4%BD%BF%E7%94%A8modernizr%E5%A4%84%E7%90%86IE%E5%85%BC%E5%AE%B9/"/>
    <id>http://wodewone.com/2016/12/01/使用modernizr处理IE兼容/</id>
    <published>2016-12-01T03:22:21.000Z</published>
    <updated>2016-12-01T07:05:16.000Z</updated>
    
    <content type="html"><![CDATA[<p><a href="http://modernizr.cn" target="_blank" rel="external">modernizr 中文网</a><br><a href="http://modernizr.cn/download/#-fontface-backgroundsize-borderimage-borderradius-boxshadow-flexbox-flexbox_legacy-hsla-multiplebgs-opacity-rgba-textshadow-cssanimations-csscolumns-generatedcontent-cssgradients-cssreflections-csstransforms-csstransforms3d-csstransitions-applicationcache-canvas-canvastext-draganddrop-hashchange-history-audio-video-indexeddb-input-inputtypes-localstorage-postmessage-sessionstorage-websockets-websqldatabase-webworkers-geolocation-inlinesvg-smil-svg-svgclippaths-touch-webgl-shiv-cssclasses-addtest-prefixed-teststyles-testprop-testallprops-hasevent-prefixes-domprefixes-load-dontmin" target="_blank" rel="external">modernizr 下载</a></p>
<h3 id="Modernizr"><a href="#Modernizr" class="headerlink" title="Modernizr"></a>Modernizr</h3><p>Modernizr： 它是一个 <code>JavaScript</code> 库，专为HTML5和CSS3开发的功能检测类库</p>
<h4 id="什么是-Modernizr？"><a href="#什么是-Modernizr？" class="headerlink" title="什么是 Modernizr？"></a>什么是 Modernizr？</h4><p>Modernizr是一个开源的JS库，它使得那些基于访客浏览器的不同（指对新标准支持性的差异）而开发不同级别体验的设计师的工作变得更为简单。它使得设计师可以在支持HTML5和CSS3的浏览器中充分利用HTML5和CSS3的特性进行开发，同时又不会牺牲其他不支持这些新技术的浏览器的控制。</p>
<blockquote>
<p>事实上 Modernizr 并不会帮你处理浏览器不支持的功能，他只是提醒你在浏览器上是否支持这些功能，当检测不支持时让你选择备用方案，以提供用户正常显示，从而做到优雅降级(graceful degradation)；</p>
</blockquote>
<p>而 Modernizr 并不是简单的通过检测 <code>user-agent</code> 字符串，而是使用一系列测试来判断浏览器的特性。在几毫秒内它就能够执行超过40种测试并将结果作为属性记录在名为Modernizr的对象中。开发人员可以通过这些信息检测他们准备使用的某特性是否被浏览器支持并作出相应的处理。</p>
<h3 id="Modernizr的原理"><a href="#Modernizr的原理" class="headerlink" title="Modernizr的原理"></a>Modernizr的原理</h3><p>Modernizr 使用 JavaScript 检测浏览器所支持的功能，但是，它并不是使用 JavaScript 动态地加载不同的样式表，而是使用非常简单的技术将类添加到页面的<html>标签。然后作为设计者由你决定使用 CSS 层叠为目标元素提供合适的样式。</html></p>
<h3 id="Modernizr使用"><a href="#Modernizr使用" class="headerlink" title="Modernizr使用"></a>Modernizr使用</h3><p>在本文开头和结尾处有下载链接，大家可以去根据自己的需求下载（可选下载）。<br><img src="/2016/12/01/使用modernizr处理IE兼容/modernizr.jpeg" alt="modernizr"><br>下载最新版本以后，<br>新建一个 <code>html</code> 页面把下载 <code>modernizr.js</code> 文件加入页面的 <code>&lt;head&gt;</code> 区域，同时在 <code>html</code> 处添加<br>像这样：</p>
<figure class="highlight html"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div></pre></td><td class="code"><pre><div class="line"><span class="meta">&lt;!DOCTYPE html&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">html</span>&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">head</span>&gt;</span></div><div class="line">	<span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">"UTF-8"</span>&gt;</span></div><div class="line">	<span class="tag">&lt;<span class="name">title</span>&gt;</span>Document<span class="tag">&lt;/<span class="name">title</span>&gt;</span></div><div class="line">	<span class="tag">&lt;<span class="name">script</span> <span class="attr">src</span>=<span class="string">"Modernizr.min.js"</span>&gt;</span><span class="undefined"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></div><div class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></div><div class="line">	</div><div class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></div><div class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></div></pre></td></tr></table></figure>
<p>接下来，向<html>元素添加“no-js”的类:</html></p>
<figure class="highlight html"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line"><span class="tag">&lt;<span class="name">html</span> <span class="attr">class</span>=<span class="string">"no-js"</span>&gt;</span></div></pre></td></tr></table></figure>
<p>然后打开这个 <code>html</code> 你会发现变成了这样：</p>
<figure class="highlight html"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div></pre></td><td class="code"><pre><div class="line"><span class="tag">&lt;<span class="name">html</span> <span class="attr">lang</span>=<span class="string">"en"</span> <span class="attr">class</span>=<span class="string">" js flexbox canvas canvastext webgl no-touch geolocation postmessage websqldatabase indexeddb hashchange history draganddrop websockets rgba hsla multiplebgs backgroundsize borderimage borderradius boxshadow textshadow opacity cssanimations csscolumns cssgradients cssreflections csstransforms csstransforms3d csstransitions fontface generatedcontent video audio localstorage sessionstorage webworkers applicationcache svg inlinesvg smil svgclippaths"</span>&gt;</span><span class="tag">&lt;<span class="name">head</span>&gt;</span></div><div class="line">	<span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">"UTF-8"</span>&gt;</span></div><div class="line">	<span class="tag">&lt;<span class="name">title</span>&gt;</span>Document<span class="tag">&lt;/<span class="name">title</span>&gt;</span></div><div class="line">	<span class="tag">&lt;<span class="name">script</span> <span class="attr">src</span>=<span class="string">"Modernizr.min.js"</span>&gt;</span><span class="undefined"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></div><div class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></div><div class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></div><div class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></div></pre></td></tr></table></figure>
<p>当Modernizr运行的时候，它会把这个“no-js”的类变为“js”来使你知道它已经运行。Modernizr并不仅仅只做这一件事情，它还会为所有它检测过的特性添加class类，如果浏览器不支持某个特性，它就为该特性对应的类名加上“no-”的前缀。</p>
<p>Modernizr同时还会创建一个JS对象，被命名为“Modernizr”，其内容是为每一个检测完的特性给出的布尔值结果组成的列表。如果浏览器支持新的canvas元素，那么“Modernizr.canvas”的值就是true；如果浏览器不支持这个新元素，那它对应的值就是false。这个JS对象针对某些功能还会包含更为详细的信息，如“Modernizr.video.h264”会告诉你浏览器是否支持这个特殊的编解码器。“Modernizr.inputtypes.search”会告诉你当前浏览器是否支持新的search input类型，等等。<br>详细如下图：<br><img src="/2016/12/01/使用modernizr处理IE兼容/modernizr-object.png" alt="modernizr-object.png"></p>
<h3 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h3><p>总的来说，Modernizr 简单易用，但不是万能的。 如何使用 Modernizr 很大程度上取决于你对 CSS 和 JavaScript 这些技能的了解深度以及掌握程度。</p>
<h3 id="附"><a href="#附" class="headerlink" title="附"></a>附</h3><h4 id="Modernizr检测清单"><a href="#Modernizr检测清单" class="headerlink" title="Modernizr检测清单"></a>Modernizr检测清单</h4><blockquote>
<ol>
<li>@font-face</li>
<li>Canvas</li>
<li>Canvas Text</li>
<li>WebGL</li>
<li>HTML5 Audio</li>
<li>HTML5 Audio formats</li>
<li>HTML5 Video</li>
<li>HTML5 Video formats</li>
<li>rgba()</li>
<li>hsla()</li>
<li>border-image</li>
<li>border-radius</li>
<li>box-shadow</li>
<li>text-shadow</li>
<li>Multiple backgrounds</li>
<li>background-size</li>
<li>opacity</li>
<li>CSS Animations</li>
<li>CSS Columns</li>
<li>CSS Gradients</li>
<li>CSS Reflections</li>
<li>CSS 2D Transforms</li>
<li>CSS 3D Transforms</li>
<li>Flexible Box Model</li>
<li>CSS Transitions</li>
<li>Geolocation API</li>
<li>Input Types</li>
<li>Input Attributes</li>
<li>localStorage</li>
<li>sessionStorage</li>
<li>Web Workers</li>
<li>applicationCache</li>
<li>SVG</li>
<li>Inline SVG</li>
<li>SVG Clip paths</li>
<li>SMIL</li>
<li>Web SQL Database</li>
<li>IndexedDB</li>
<li>Web Sockets</li>
<li>hashchange Event</li>
<li>History Management</li>
<li>Drag and Drop</li>
<li>Cross-window Messaging</li>
<li>Touch Events</li>
</ol>
</blockquote>
<p><a href="http://modernizr.cn" target="_blank" rel="external">modernizr中文网</a><br><a href="http://modernizr.cn/download/#-fontface-backgroundsize-borderimage-borderradius-boxshadow-flexbox-flexbox_legacy-hsla-multiplebgs-opacity-rgba-textshadow-cssanimations-csscolumns-generatedcontent-cssgradients-cssreflections-csstransforms-csstransforms3d-csstransitions-applicationcache-canvas-canvastext-draganddrop-hashchange-history-audio-video-indexeddb-input-inputtypes-localstorage-postmessage-sessionstorage-websockets-websqldatabase-webworkers-geolocation-inlinesvg-smil-svg-svgclippaths-touch-webgl-shiv-cssclasses-addtest-prefixed-teststyles-testprop-testallprops-hasevent-prefixes-domprefixes-load-dontmin" target="_blank" rel="external">modernizr 下载</a></p>
<h3 id="参考网站"><a href="#参考网站" class="headerlink" title="参考网站"></a>参考网站</h3><ul>
<li><a href="http://www.osmn00.com/translation/221.html" target="_blank" rel="external">Modernizr——为HTML5和CSS3而生！</a></li>
</ul>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;&lt;a href=&quot;http://modernizr.cn&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;modernizr 中文网&lt;/a&gt;&lt;br&gt;&lt;a href=&quot;http://modernizr.cn/download/#-fontface-backgr
    
    </summary>
    
      <category term="兼容性" scheme="http://wodewone.com/categories/%E5%85%BC%E5%AE%B9%E6%80%A7/"/>
    
    
      <category term="javascript" scheme="http://wodewone.com/tags/javascript/"/>
    
      <category term="css" scheme="http://wodewone.com/tags/css/"/>
    
      <category term="浏览器兼容" scheme="http://wodewone.com/tags/%E6%B5%8F%E8%A7%88%E5%99%A8%E5%85%BC%E5%AE%B9/"/>
    
  </entry>
  
  <entry>
    <title>使用web(js)技术创建跨平台的app</title>
    <link href="http://wodewone.com/2016/11/30/%E4%BD%BF%E7%94%A8web-js-%E6%8A%80%E6%9C%AF%E5%88%9B%E5%BB%BA%E8%B7%A8%E5%B9%B3%E5%8F%B0%E7%9A%84app/"/>
    <id>http://wodewone.com/2016/11/30/使用web-js-技术创建跨平台的app/</id>
    <published>2016-11-30T15:51:09.000Z</published>
    <updated>2016-12-03T13:34:24.000Z</updated>
    
    <content type="html"><![CDATA[<h3 id="序"><a href="#序" class="headerlink" title="序"></a>序</h3><p>问：当下什么语言是最好的？<br>答：js!（哈哈哈哈哈哈哈哈）</p>
<p>作为一个 jSer 我只能说现在还有什么不能用 js 去写的，没有做不到的只有你想不到的 服务器、Android、ios、web、客户端应用……</p>
<p>如今跨平台的桌面 app 也可以，</p>
<h3 id="开始吧！"><a href="#开始吧！" class="headerlink" title="开始吧！"></a>开始吧！</h3><p>介绍</p>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">Build cross platform desktop apps</div><div class="line">with JavaScript, HTML, and CSS</div></pre></td></tr></table></figure>
<p>这个是它官网上的介绍，作为一个前端开发，看到这个真的觉得很欣喜啊，同时也很悲伤（这tm什么时候能学完呐~）<br>先手团<a href="http://electron.atom.io" target="_blank" rel="external">Electron</a>~<br>这是个Github发布的跨平台桌面应用开发工具，支持 Web 技术开发桌面应用开发，其本身是基于 C++ 开发的，GUI 核心来自于 Chrome，而 <code>JavaScript</code> 引擎使用 v8。</p>
<h4 id="安装使用"><a href="#安装使用" class="headerlink" title="安装使用"></a>安装使用</h4><ol>
<li><p>你可以在它的<a href="http://electron.atom.io" target="_blank" rel="external">官网</a>上下载官方的开发工具进行开发，同时他还提供了一个新手开发的Demo </p>
<blockquote>
<p>详细文档<a href="http://electron.atom.io/docs/" target="_blank" rel="external">查看这里</a></p>
</blockquote>
</li>
<li><p>你也可以通过 <code>npm</code> 安装（运行需要 <code>node</code> 环境）</p>
</li>
</ol>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line"><span class="comment"># Install the `electron` command globally</span></div><div class="line">npm install electron-prebuilt -g</div><div class="line"> </div><div class="line"><span class="comment"># Install as a development dependency</span></div><div class="line">npm install electron-prebuilt --save-dev</div></pre></td></tr></table></figure>
<p>用兴趣的话你可以试试~</p>
<h4 id="示例"><a href="#示例" class="headerlink" title="示例"></a>示例</h4><p>这里找到几个新手开发的Demo：（味精策士~）</p>
<ul>
<li><a href="https://segmentfault.com/a/1190000004843033" target="_blank" rel="external">从零开始使用Electron + jQuery开发桌面应用（一） HelloWorld</a></li>
<li><a href="https://www.oschina.net/question/2814805_2183386" target="_blank" rel="external">基于 electron+Vue.js+Node.js 开发的简约音乐搜索播放器</a></li>
</ul>
]]></content>
    
    <summary type="html">
    
      &lt;h3 id=&quot;序&quot;&gt;&lt;a href=&quot;#序&quot; class=&quot;headerlink&quot; title=&quot;序&quot;&gt;&lt;/a&gt;序&lt;/h3&gt;&lt;p&gt;问：当下什么语言是最好的？&lt;br&gt;答：js!（哈哈哈哈哈哈哈哈）&lt;/p&gt;
&lt;p&gt;作为一个 jSer 我只能说现在还有什么不能用 js 去写的，没有做
    
    </summary>
    
      <category term="javascript" scheme="http://wodewone.com/categories/javascript/"/>
    
    
      <category term="javascript" scheme="http://wodewone.com/tags/javascript/"/>
    
      <category term="app" scheme="http://wodewone.com/tags/app/"/>
    
  </entry>
  
  <entry>
    <title>自动化测试工具-Nightmare</title>
    <link href="http://wodewone.com/2016/11/30/%E8%87%AA%E5%8A%A8%E5%8C%96%E6%B5%8B%E8%AF%95%E5%B7%A5%E5%85%B7-Nightmare/"/>
    <id>http://wodewone.com/2016/11/30/自动化测试工具-Nightmare/</id>
    <published>2016-11-30T15:36:29.000Z</published>
    <updated>2016-12-03T13:35:14.000Z</updated>
    
    <content type="html"><![CDATA[<h3 id="序"><a href="#序" class="headerlink" title="序"></a>序</h3><p>今天在阮大博客上面看到的一个自动化测试库，<a href="http://www.nightmarejs.org" target="_blank" rel="external">官网</a>上是这么说的 “A high-level browser automation library.” </p>
<p>官网提供实例：</p>
<p>使用 <code>phantomjs</code> 代码：</p>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div></pre></td><td class="code"><pre><div class="line">phantom.create(<span class="function"><span class="keyword">function</span> (<span class="params">ph</span>) </span>&#123;</div><div class="line">  ph.createPage(<span class="function"><span class="keyword">function</span> (<span class="params">page</span>) </span>&#123;</div><div class="line">    page.open(<span class="string">'http://yahoo.com'</span>, <span class="function"><span class="keyword">function</span> (<span class="params">status</span>) </span>&#123;</div><div class="line">      page.evaluate(<span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</div><div class="line">        <span class="keyword">var</span> el =</div><div class="line">          <span class="built_in">document</span>.querySelector(<span class="string">'input[title="Search"]'</span>);</div><div class="line">        el.value = <span class="string">'github nightmare'</span>;</div><div class="line">      &#125;, <span class="function"><span class="keyword">function</span> (<span class="params">result</span>) </span>&#123;</div><div class="line">        page.evaluate(<span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</div><div class="line">          <span class="keyword">var</span> el = <span class="built_in">document</span>.querySelector(<span class="string">'.searchsubmit'</span>);</div><div class="line">          <span class="keyword">var</span> event = <span class="built_in">document</span>.createEvent(<span class="string">'MouseEvent'</span>);</div><div class="line">          event.initEvent(<span class="string">'click'</span>, <span class="literal">true</span>, <span class="literal">false</span>);</div><div class="line">          el.dispatchEvent(event);</div><div class="line">        &#125;, <span class="function"><span class="keyword">function</span> (<span class="params">result</span>) </span>&#123;</div><div class="line">          ph.exit();</div><div class="line">        &#125;);</div><div class="line">      &#125;);</div><div class="line">    &#125;);</div><div class="line">  &#125;);</div><div class="line">&#125;);</div></pre></td></tr></table></figure>
<p>使用 <code>nightmare</code> 代码：</p>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">yield</span> Nightmare()</div><div class="line">  .goto(<span class="string">'http://yahoo.com'</span>)</div><div class="line">  .type(<span class="string">'input[title="Search"]'</span>, <span class="string">'github nightmare'</span>)</div><div class="line">  .click(<span class="string">'.searchsubmit'</span>);</div></pre></td></tr></table></figure>
<p>API 地址 <a href="https://github.com/segmentio/nightmare#api" target="_blank" rel="external">点这里</a></p>
<h3 id="安装使用"><a href="#安装使用" class="headerlink" title="安装使用"></a>安装使用</h3><p>安装nightmare：</p>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">$ npm install nightmare</div></pre></td></tr></table></figure>
<p>nightmare同时也支持插件方式抽取公用逻辑，以供复用和提高测试代码语意，如下例子：</p>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div></pre></td><td class="code"><pre><div class="line"><span class="comment">/**</span></div><div class="line"> * Login to a Swiftly account.</div><div class="line"> *</div><div class="line"> * @param &#123;String&#125; email</div><div class="line"> * @param &#123;String&#125; password</div><div class="line"> */</div><div class="line"></div><div class="line">exports.login = <span class="function"><span class="keyword">function</span>(<span class="params">email, password</span>)</span>&#123;</div><div class="line">  <span class="keyword">return</span> <span class="function"><span class="keyword">function</span>(<span class="params">nightmare</span>) </span>&#123;</div><div class="line">    nightmare</div><div class="line">      .viewport(<span class="number">800</span>, <span class="number">1600</span>)</div><div class="line">      .goto(<span class="string">'https://swiftly.com/login'</span>)</div><div class="line">        .type(<span class="string">'#username'</span>, email)</div><div class="line">        .type(<span class="string">'#password'</span>, password)</div><div class="line">        .click(<span class="string">'.button--primary'</span>)</div><div class="line">      .wait();</div><div class="line">  &#125;;</div><div class="line">&#125;;</div></pre></td></tr></table></figure>
<p>使用代码也很简单：</p>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">var</span> Swiftly = <span class="built_in">require</span>(<span class="string">'nightmare-swiftly'</span>);</div><div class="line"><span class="keyword">new</span> Nightmare()</div><div class="line">  .use(Swiftly.login(email, password))</div><div class="line">  .use(Swiftly.task(instructions, uploads, path))</div><div class="line">  .run();</div></pre></td></tr></table></figure>
]]></content>
    
    <summary type="html">
    
      &lt;h3 id=&quot;序&quot;&gt;&lt;a href=&quot;#序&quot; class=&quot;headerlink&quot; title=&quot;序&quot;&gt;&lt;/a&gt;序&lt;/h3&gt;&lt;p&gt;今天在阮大博客上面看到的一个自动化测试库，&lt;a href=&quot;http://www.nightmarejs.org&quot; target=&quot;_blank&quot; 
    
    </summary>
    
      <category term="javascript" scheme="http://wodewone.com/categories/javascript/"/>
    
    
      <category term="javascript" scheme="http://wodewone.com/tags/javascript/"/>
    
      <category term="测试工具" scheme="http://wodewone.com/tags/%E6%B5%8B%E8%AF%95%E5%B7%A5%E5%85%B7/"/>
    
  </entry>
  
  <entry>
    <title>fackbook的Flux</title>
    <link href="http://wodewone.com/2016/11/28/fackbook%E7%9A%84Flux/"/>
    <id>http://wodewone.com/2016/11/28/fackbook的Flux/</id>
    <published>2016-11-28T07:19:41.000Z</published>
    <updated>2016-11-28T07:23:10.000Z</updated>
    
    <content type="html"><![CDATA[<h3 id="Flux"><a href="#Flux" class="headerlink" title="Flux"></a>Flux</h3><p><a href="https://facebook.github.io/flux" target="_blank" rel="external">Flux</a></p>
<p>Flux is the application architecture that Facebook uses for building client-side web applications. It complements React’s composable view components by utilizing a unidirectional data flow. It’s more of a pattern rather than a formal framework, and you can start using Flux immediately without a lot of new code.</p>
<p><a href="https://facebook.github.io/flux" target="_blank" rel="external">Flux</a></p>
]]></content>
    
    <summary type="html">
    
      &lt;h3 id=&quot;Flux&quot;&gt;&lt;a href=&quot;#Flux&quot; class=&quot;headerlink&quot; title=&quot;Flux&quot;&gt;&lt;/a&gt;Flux&lt;/h3&gt;&lt;p&gt;&lt;a href=&quot;https://facebook.github.io/flux&quot; target=&quot;_blank&quot; rel=
    
    </summary>
    
      <category term="Flux" scheme="http://wodewone.com/categories/Flux/"/>
    
    
      <category term="javascript" scheme="http://wodewone.com/tags/javascript/"/>
    
  </entry>
  
  <entry>
    <title>git批量删除文件夹和文件</title>
    <link href="http://wodewone.com/2016/11/27/git%E6%89%B9%E9%87%8F%E5%88%A0%E9%99%A4%E6%96%87%E4%BB%B6%E5%A4%B9%E5%92%8C%E6%96%87%E4%BB%B6/"/>
    <id>http://wodewone.com/2016/11/27/git批量删除文件夹和文件/</id>
    <published>2016-11-26T17:17:47.000Z</published>
    <updated>2016-12-03T13:35:45.000Z</updated>
    
    <content type="html"><![CDATA[<h3 id="序"><a href="#序" class="headerlink" title="序"></a>序</h3><p>最近一直在加班也没有时间（懒）去写博客了，一直都在印象笔记里面写东西，都快忘了还有它的存在了，哈哈哈，<br>今天看着距离上次提交好长时间了，想着更新一把吧<br>结果提交了一下还悲剧了，忘了上次什么时候写的东西一直没有提交上去，<br>然后我就把 <code>hexo</code> 提交了一下，<br>突然，<br>（此时心中已有万匹羊驼在狂奔~）</p>
<hr>
<p>由于太长时间没有提交 <code>hexo</code> ，<br>然后忘记了之前一直都是用 <code>git</code> 提交东西的，现在本地和 <code>git</code> 冲突，<br>然后还有很久之前提交的东西，全都对不上了，万幸啊还好我没有直接在 <code>git</code> 仓库里面直接创建的 <code>hexo</code> 而是单独拉出来的；<br>索性直接把 <code>git</code> 格式化了吧，重新提交一遍；</p>
<p>记录一下清库的操作，万一哪天又用上了呢（哈哈哈哈哈哈）~</p>
<h4 id="git-操作"><a href="#git-操作" class="headerlink" title="git 操作"></a>git 操作</h4><blockquote>
<p>git 批量删除文件夹和文件</p>
</blockquote>
<p>本地删除文件后，执行 <code>$ git status</code></p>
<p>然后接着 <code>$ git rm &lt;文件&gt;</code></p>
<p>此时如果是要删除大批量文件，这么一个一个命令下去不得累死人啊</p>
<p>其实可以这样（不管之前有没有已经本地物理删除）</p>
<p>执行 <code>$ git rm * -r</code>（记得，cd 到你要删除的目录下。当然 * 可以换成指定目录）</p>
<p>这时删除文件已经进入本地缓存区，</p>
<p>接下来就是正常的提交操作了</p>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">$ git add . </div><div class="line">$ git commit -m <span class="string">"clear"</span></div><div class="line">$ git push origin master</div></pre></td></tr></table></figure>
]]></content>
    
    <summary type="html">
    
      &lt;h3 id=&quot;序&quot;&gt;&lt;a href=&quot;#序&quot; class=&quot;headerlink&quot; title=&quot;序&quot;&gt;&lt;/a&gt;序&lt;/h3&gt;&lt;p&gt;最近一直在加班也没有时间（懒）去写博客了，一直都在印象笔记里面写东西，都快忘了还有它的存在了，哈哈哈，&lt;br&gt;今天看着距离上次提交好长时间了，想着更
    
    </summary>
    
      <category term="笔记" scheme="http://wodewone.com/categories/%E7%AC%94%E8%AE%B0/"/>
    
    
      <category term="git" scheme="http://wodewone.com/tags/git/"/>
    
  </entry>
  
  <entry>
    <title>Charles使用以及Charles Response显示乱码</title>
    <link href="http://wodewone.com/2016/11/13/Charles-user/"/>
    <id>http://wodewone.com/2016/11/13/Charles-user/</id>
    <published>2016-11-13T07:01:57.000Z</published>
    <updated>2016-12-04T08:11:51.000Z</updated>
    
    <content type="html"><![CDATA[<blockquote>
<p>为了方便大家使用，我已经将所用版本上传百度云盘，请大家自行下载，下载解压后直接拖进应用程序文件夹即可（非 DMG 安装包）<a href="https://pan.baidu.com/s/1pLlPlvt" target="_blank" rel="external">Charles-V3.11 for Mac</a> ，大家也可以自行通过其他方式下载；<br>注：如果提示文件已损坏，请尝试更新系统（虽然不一定有用，哈哈） or 通过其他方式下载；<br>如果你已经安装可忽略此提示；</p>
</blockquote>
<hr>
<h2 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h2><p>我想，如果你是个善于利用搜索引擎的人，那么在 Google 中输入「Charles 使用」等相应的关键字，便会出现一大把文章。<br>不过呢，之所以会有这篇文章，就是因为今天在安装和初步使用的过程中，遇到了些问题，而目前搜索出来的绝大数文章并没有提及（或者解决办法已经过时）。所以，我在此记录下来，希望能帮助到通过搜索找到这的朋友们。</p>
<hr>
<h2 id="付费-amp-正版"><a href="#付费-amp-正版" class="headerlink" title="付费 &amp; 正版"></a>付费 &amp; 正版</h2><blockquote>
<p>Charles 是收费软件，可以免费试用 30 天。试用期过后，未付费的用户仍然可以继续使用，但是每次使用时间不能超过 30 分钟，使用过程中不定时会中断 5 秒钟，并且启动时将会有 10 秒种的延时。因此，该付费方案对广大用户还是相当友好的，即使你长期不付费，也能使用完整的软件功能。只是当你需要长时间进行封包调试时，会因为 Charles 强制关闭而遇到影响。</p>
</blockquote>
<p>关于价格，见下表：</p>
<table>
<thead>
<tr>
<th>License</th>
<th>Pricing</th>
</tr>
</thead>
<tbody>
<tr>
<td>1-4 User Licenses</td>
<td>US$50 / license</td>
</tr>
<tr>
<td>5+ User Licenses</td>
<td>US$40 / license (20% discount)</td>
</tr>
<tr>
<td>10+ User Licenses</td>
<td>US$30 / license (40% discount)</td>
</tr>
<tr>
<td>Site License</td>
<td>US$400</td>
</tr>
<tr>
<td>Multi-Site License</td>
<td>US$700</td>
</tr>
</tbody>
</table>
<p>50 刀的价格虽然不白菜，但试用版并未阉割功能，只是在使用体验上稍差，这可称得上良心啊。虽然我暂时不会购买，但我依然会使用正版，希望你也如此。</p>
<hr>
<h2 id="使用"><a href="#使用" class="headerlink" title="使用"></a>使用</h2><p>安装后直接打开 Charles 即可使用;<br>保证电脑和手机在同一局域网内（就是用的同一个 wifi，哈哈）；<br>然后看图设置：<br><img src="/2016/11/13/Charles-user/proxy-setting.png" alt="proxy-setting"></p>
<p>接着<br><img src="http-proxy.png" alt="http-proxy"></p>
<p>然后手机设置代理为手动：<br>（不会怎么办？各平台修改代理方式请自行百度~ 哈哈）<br>服务器地址就写自己当前电脑的局域网 ip，端口写上图显示的端口号（例：上图端口号为 8888）<br>查看局域网ip：mac 下打开终端输入</p>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">ifconfig en0</div></pre></td></tr></table></figure>
<p>输入代理后保存返回（ios 直接返回即可）<br>稍后电脑上charles会弹出 下图：<br><img src="/2016/11/13/Charles-user/allow-connect.png" alt="allow-connect"></p>
<p>点击 <code>allow</code> 即可（别点错了，点错了我也不知道会咋样，哈哈！有兴趣的同学可自行尝试，吼吼）</p>
<p>到这里如果你没有出现其他异常情况，那么你已经可以正常使用了（如果还不行的话，你应该砸电脑了，哈哈哈）</p>
<h2 id="停用VPN"><a href="#停用VPN" class="headerlink" title="停用VPN"></a>停用VPN</h2><p>当我打开 Charles（Mac OS X Proxy 已选择），按理说，我立刻就能看见源源不断的网络请求出现在 Charles 的界面中啦，可为什么始终是一片空白呢？</p>
<p>一番搜索，终于在这里 <a href="http://stackoverflow.com/questions/25697849/charles-proxy-not-working-with-chrome" target="_blank" rel="external">Charles proxy not working with Chrome</a> 找到了答案：</p>
<blockquote>
<p>For anyone else using VPN: Charles must be turned on before VPN. So quitting VPN after turning on Charles won’t work either.</p>
</blockquote>
<p>没办法，为了正常使用 Charles，只能暂时把梯子撤了(请暂时关闭vpn链接)：</p>
<p><a href="http://7xikfc.com1.z0.glb.clouddn.com/tips-for-using-charles-01.png" target="_blank" rel="external"><img src="http://7xikfc.com1.z0.glb.clouddn.com/tips-for-using-charles-01.png" alt=""></a></p>
<hr>
<h2 id="乱码"><a href="#乱码" class="headerlink" title="乱码"></a>乱码</h2><p>刚开始用着挺好的啊，怎么一言不合，就来个乱码呢？</p>
<p><a href="http://7xikfc.com1.z0.glb.clouddn.com/tips-for-using-charles-08.png" target="_blank" rel="external"><img src="http://7xikfc.com1.z0.glb.clouddn.com/tips-for-using-charles-08.png" alt=""></a></p>
<p>于是，便在 Google 中输入「Charles 乱码」，我保证，你能搜到的绝对是这样的答案：</p>
<p><a href="http://7xikfc.com1.z0.glb.clouddn.com/tips-for-using-charles-09.jpg" target="_blank" rel="external"><img src="http://7xikfc.com1.z0.glb.clouddn.com/tips-for-using-charles-09.jpg" alt=""></a></p>
<p>可我告诉你，反正我尝试了在各种地方进行添加，最后都没有成功。<br>而我最终解决了乱码的问题，但根本没有涉及到 <code>Info.plist</code>。你只要确保，我接下来提及的问题，你有正确进行设置。</p>
<h3 id="安装-SSL-证书"><a href="#安装-SSL-证书" class="headerlink" title="安装 SSL 证书"></a>安装 SSL 证书</h3><h4 id="Mac-端"><a href="#Mac-端" class="headerlink" title="Mac 端"></a>Mac 端</h4><blockquote>
<p>首先去 <a href="http://www.charlesproxy.com/ssl.zip" target="_blank" rel="external">http://www.charlesproxy.com/ssl.zip</a> 下载 CA 证书文件，然后双击 .crt 文件，选择「总是信任」按钮，在钥匙串访问中即可看到添加成功的证书。</p>
</blockquote>
<p>看看，人家说的多么简单啊，可事实呢？当我访问上述网址时，出现的是如下的文字：</p>
<blockquote>
<p>If you are running Charles v3.10 or later, please go to Charles and consult the SSL Proxying submenu in the Help menu, for instructions on installing your new Charles Root Certificate.</p>
</blockquote>
<p>我那蹩脚的英文告诉我：如果你使用的是 v3.10 及之后的版本，安装方法已经变了，正确的姿势：启动 Charles 软件，在菜单中找到 Help -&gt; SSL Proxying -&gt; Install Charles Root Certificate. 如下图所示：</p>
<p><a href="http://7xikfc.com1.z0.glb.clouddn.com/tips-for-using-charles-02.png" target="_blank" rel="external"><img src="http://7xikfc.com1.z0.glb.clouddn.com/tips-for-using-charles-02.png" alt=""></a><a href="http://blog.devtang.com/2015/11/14/charles-introduction/" target="_blank" rel="external">图片来自</a></p>
<p>随后是这样的：</p>
<p><a href="http://7xikfc.com1.z0.glb.clouddn.com/tips-for-using-charles-03.jpg" target="_blank" rel="external"><img src="http://7xikfc.com1.z0.glb.clouddn.com/tips-for-using-charles-03.jpg" alt=""></a><br><a href="http://7xikfc.com1.z0.glb.clouddn.com/tips-for-using-charles-04.jpg" target="_blank" rel="external"><img src="http://7xikfc.com1.z0.glb.clouddn.com/tips-for-using-charles-04.jpg" alt=""></a><a href="https://gitsea.com/2015/11/11/charles-https-%E6%8A%93%E5%8C%85-mac/" target="_blank" rel="external">图片来自</a></p>
<h4 id="移动端"><a href="#移动端" class="headerlink" title="移动端"></a>移动端</h4><p>步骤：Help -&gt; SSL Proxying -&gt;Install Charles Root Certificate on a Mobile Device…</p>
<p><a href="http://7xikfc.com1.z0.glb.clouddn.com/tips-for-using-charles-07.png" target="_blank" rel="external"><img src="http://7xikfc.com1.z0.glb.clouddn.com/tips-for-using-charles-07.png" alt=""></a></p>
<p>根据这个提示复制网址 <code>http://charlesproxy.com/getssl</code> 然后在手机浏览器内打开即可，然后会提示证书安装，大家根据提示安装即可~</p>
<h3 id="Mac-上的设置"><a href="#Mac-上的设置" class="headerlink" title="Mac 上的设置"></a>Mac 上的设置</h3><ol>
<li><p>在 Charles 的工具栏上点击设置按钮，选择 SSL Proxy Settings，选中 Enable SSL Proxying。（别急，选完先别关掉）</p>
</li>
<li><p>SSL 选项卡的 Locations 里填写要抓包的域名和端口，点击 Add 按钮，在弹出的表单中 Host 填写域名。比如填api.instagram.com，Port 填 443</p>
</li>
</ol>
<p><a href="http://7xikfc.com1.z0.glb.clouddn.com/tips-for-using-charles-11.jpg" target="_blank" rel="external"><img src="http://7xikfc.com1.z0.glb.clouddn.com/tips-for-using-charles-11.jpg" alt=""></a><a href="https://gitsea.com/2015/11/11/charles-https-%E6%8A%93%E5%8C%85-mac/" target="_blank" rel="external">图片来自</a></p>
<p><strong>关于乱码，如果没有做这项操作，则肯定会出现乱码。而至于否是在 <code>Info.plist</code> 中添加 <code>UTF-8</code> 的字段，反正最后我没加，但一切正常。</strong></p>
<p>所以这个坑，我也是无意间解决的。</p>
<h3 id="iPhone-上的设置"><a href="#iPhone-上的设置" class="headerlink" title="iPhone 上的设置"></a>iPhone 上的设置</h3><blockquote>
<p>首先我们需要获取 Charles 运行所在电脑的 IP 地址，Charles 的顶部菜单的 “Help”-&gt;”Local IP Address”，即可在弹出的对话框中看到 IP 地址，如下图所示：</p>
</blockquote>
<p><a href="http://7xikfc.com1.z0.glb.clouddn.com/tips-for-using-charles-05.png" target="_blank" rel="external"><img src="http://7xikfc.com1.z0.glb.clouddn.com/tips-for-using-charles-05.png" alt=""></a></p>
<p>然后就是在 iPhone 上的一系列操作，又是很简单，有木有！</p>
<p>可是，为什么尼玛我怎么试都不成果呢？！iPhone 上浏览器网址都打不开了….于是又尝试了另一种方式，在终端敲入 <code>ifconfig en0</code>：</p>
<p><img src="http://7xikfc.com1.z0.glb.clouddn.com/tips-for-using-charles-06.jpg" alt="ifconfig"></p>
<p><a href="http://itangqi.me/2016/05/30/tips-for-using-charles/" target="_blank" rel="external">本文摘抄自</a></p>
]]></content>
    
    <summary type="html">
    
      &lt;blockquote&gt;
&lt;p&gt;为了方便大家使用，我已经将所用版本上传百度云盘，请大家自行下载，下载解压后直接拖进应用程序文件夹即可（非 DMG 安装包）&lt;a href=&quot;https://pan.baidu.com/s/1pLlPlvt&quot; target=&quot;_blank&quot; rel=
    
    </summary>
    
    
      <category term="charles" scheme="http://wodewone.com/tags/charles/"/>
    
      <category term="web" scheme="http://wodewone.com/tags/web/"/>
    
      <category term="mac" scheme="http://wodewone.com/tags/mac/"/>
    
  </entry>
  
  <entry>
    <title>AngularJs开发——指令与控制器间的通信</title>
    <link href="http://wodewone.com/2016/11/01/AngularJs%E5%BC%80%E5%8F%91%E2%80%94%E2%80%94%E6%8C%87%E4%BB%A4%E4%B8%8E%E6%8E%A7%E5%88%B6%E5%99%A8%E9%97%B4%E7%9A%84%E9%80%9A%E4%BF%A1/"/>
    <id>http://wodewone.com/2016/11/01/AngularJs开发——指令与控制器间的通信/</id>
    <published>2016-11-01T11:45:29.000Z</published>
    <updated>2016-12-02T16:19:11.000Z</updated>
    
    <content type="html"><![CDATA[<h3 id="指令与控制器之间通信"><a href="#指令与控制器之间通信" class="headerlink" title="指令与控制器之间通信"></a>指令与控制器之间通信</h3><ol>
<li>通过指令自身参数</li>
<li>基于event传播的方式</li>
<li>service的方式</li>
</ol>
<h4 id="方式一：指令参数共享对象-方法"><a href="#方式一：指令参数共享对象-方法" class="headerlink" title="方式一：指令参数共享对象/方法"></a>方式一：指令参数共享对象/方法</h4><blockquote>
<p>首先我们必须得清楚，每一个 $scope 都是scope的一个事例，而通过绑定将数据绑定在 $scope 就能实现双向绑定。scope的层次结构跟controller相关，继承关系跟又遵循了原型继承的规则，而子controller所初始化的scope是创建一个新的变量，而不是去修改父controller中的值。所以就不难使用为什么不使用基本类型变量而是使用引用类型变量去实现控制器间的通信。</p>
</blockquote>
<p>指令中怎么创建 scope：</p>
<ul>
<li>scope默认值是false，表示scope跟父controller的scope相同</li>
<li>scope:true，表示创建一个继承自父scope的新scope，这样就可以让同一个父控制下的指令都可以使用这个scope进行通信。</li>
<li>创建完全独立的属于指令自己的scope，这样可以防止读取和修改父级scope的数据。</li>
</ul>
<p>创建完全独立的scope的API：</p>
<ul>
<li>=：提供一个与父scope的双向绑定的属性。</li>
<li>&amp;：能够在指令内访问定义在父scope注册的函数。</li>
<li>@：提供一个 父scope-》子指令的单向绑定的属性。</li>
</ul>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">var</span> app = angular.module(<span class="string">'app'</span>, []);</div><div class="line"></div><div class="line">angular.element(<span class="built_in">document</span>).ready(<span class="function"><span class="keyword">function</span> <span class="title">readyHandler</span>(<span class="params"></span>) </span>&#123;</div><div class="line">    angular.bootstrap(<span class="built_in">document</span>, [<span class="string">'app'</span>]);</div><div class="line">&#125;);</div><div class="line"></div><div class="line">app.controller(<span class="string">'demo'</span>, <span class="function"><span class="keyword">function</span>(<span class="params">$scope</span>)</span>&#123;</div><div class="line">  $scope.num = <span class="number">0</span>;</div><div class="line">  $scope.add = <span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</div><div class="line">    $scope.num++;</div><div class="line">  &#125;;</div><div class="line">&#125;);</div><div class="line">app.directive(<span class="string">'addNum'</span>, <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</div><div class="line">  <span class="keyword">return</span> &#123;</div><div class="line">    <span class="attr">restrict</span>: <span class="string">'EA'</span>,</div><div class="line">    <span class="attr">replace</span>: <span class="literal">true</span>,</div><div class="line">    <span class="attr">scope</span> : &#123;</div><div class="line">      <span class="attr">num</span>: <span class="string">'=num'</span>,</div><div class="line">      <span class="attr">add</span>: <span class="string">'&amp;'</span></div><div class="line">    &#125;,</div><div class="line">    <span class="attr">template</span>: <span class="string">'&lt;p&gt;&lt;button ng-click="add()"&gt;点我&lt;/button&gt;&#123;&#123;num&#125;&#125;&lt;/p&gt;&lt;/div&gt;'</span>,</div><div class="line">    <span class="attr">link</span>: <span class="function"><span class="keyword">function</span>(<span class="params">$scope</span>)</span>&#123;</div><div class="line"></div><div class="line">    &#125;</div><div class="line">  &#125;;</div><div class="line">&#125;);</div></pre></td></tr></table></figure>
<p><a href="http://jsbin.com/xodebe/2/edit?html,js,output" target="_blank" rel="external">view JSbin</a></p>
<h4 id="方式二：通过服务"><a href="#方式二：通过服务" class="headerlink" title="方式二：通过服务"></a>方式二：通过服务</h4><p>通过 services 实现控制器与指令双向通信，也比较简单</p>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">var</span> app = angular.module(<span class="string">'app'</span>, []);</div><div class="line"></div><div class="line">angular.element(<span class="built_in">document</span>).ready(<span class="function"><span class="keyword">function</span> <span class="title">readyHandler</span>(<span class="params"></span>) </span>&#123;</div><div class="line">    angular.bootstrap(<span class="built_in">document</span>, [<span class="string">'app'</span>]);</div><div class="line">&#125;);</div><div class="line"></div><div class="line">app.service(<span class="string">'SettingsService'</span>, <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</div><div class="line">    <span class="keyword">return</span> &#123;</div><div class="line">        <span class="string">'precision'</span> : <span class="number">2</span></div><div class="line">    &#125;;</div><div class="line">&#125;);</div><div class="line">app.controller(<span class="string">'demo'</span>, [<span class="string">'$scope'</span>, <span class="string">'SettingsService'</span>, <span class="function"><span class="keyword">function</span>(<span class="params">$scope, settings</span>) </span>&#123;</div><div class="line">    $scope.settings = settings;</div><div class="line">&#125;]);</div><div class="line">app.directive(<span class="string">'numDisplay'</span>, [<span class="string">'SettingsService'</span>, <span class="function"><span class="keyword">function</span>(<span class="params">settings</span>) </span>&#123;</div><div class="line">    <span class="keyword">return</span> &#123;</div><div class="line">        <span class="string">'restrict'</span> : <span class="string">'EA'</span>,</div><div class="line">        <span class="string">'scope'</span> : &#123;</div><div class="line">            </div><div class="line">        &#125;,</div><div class="line">        <span class="string">'template'</span> : <span class="string">'&lt;p ng-click="changePrecision()"&gt;&#123;&#123; 123456789 | number:settings.precision &#125;&#125;&#123;&#123;settings.precision&#125;&#125;&lt;/p&gt;'</span>,</div><div class="line">        <span class="string">'replace'</span> : <span class="literal">true</span>,</div><div class="line">        <span class="string">'link'</span> : <span class="function"><span class="keyword">function</span>(<span class="params">$scope</span>) </span>&#123;</div><div class="line">            $scope.settings = settings;</div><div class="line">            $scope.changePrecision = <span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</div><div class="line">              $scope.settings.precision++;</div><div class="line">            &#125;;</div><div class="line">        &#125;</div><div class="line">    &#125;;</div><div class="line">&#125;]);</div></pre></td></tr></table></figure>
<p><a href="http://jsbin.com/zaloj/5/edit?html,js,output" target="_blank" rel="external">view JSbin</a></p>
<h4 id="方式三：基于event传播的方式"><a href="#方式三：基于event传播的方式" class="headerlink" title="方式三：基于event传播的方式"></a>方式三：基于event传播的方式</h4><p>使用基于event来让控制器跟指令通信，指令中的 scope 就不能设置为独立的了，所以编写指令最好不要使用此方法。</p>
<p>其实跟控制器通信中基于event传播原理是一样，只是把controller中的代码写在了diresctive中的controller中而已。</p>
<p>通过三种方法比较：个人比较推荐方法一中的创建独立scope。因为这样既不会污染其他scope，也能够一眼就能看出来该指令需要从外部scope得到方法或者属性。对于方法二个人觉得用在初始化还是挺不错的。对于方法三则不很不推荐。</p>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">var</span> app = angular.module(<span class="string">'app'</span>, []);</div><div class="line"></div><div class="line">angular.element(<span class="built_in">document</span>).ready(<span class="function"><span class="keyword">function</span> <span class="title">readyHandler</span>(<span class="params"></span>) </span>&#123;</div><div class="line">    angular.bootstrap(<span class="built_in">document</span>, [<span class="string">'app'</span>]);</div><div class="line">&#125;);</div><div class="line"><span class="comment">// 父scope上的控制器</span></div><div class="line"><span class="function"><span class="keyword">function</span> <span class="title">demo</span>(<span class="params">$scope</span>) </span>&#123;</div><div class="line">    $scope.send = <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</div><div class="line">      $scope.content = <span class="string">'good！！！'</span>;</div><div class="line">      $scope.$broadcast(<span class="string">'send'</span>, $scope.content);</div><div class="line">    &#125;;</div><div class="line">&#125;</div><div class="line">app.directive(<span class="string">'chatRoom'</span>, [<span class="function"><span class="keyword">function</span>(<span class="params">settings</span>) </span>&#123;</div><div class="line">    <span class="keyword">return</span> &#123;</div><div class="line">        <span class="string">'restrict'</span> : <span class="string">'EA'</span>,</div><div class="line">        <span class="string">'template'</span> : <span class="string">'&lt;div&gt;&lt;p&gt;XXX: &#123;&#123;content&#125;&#125;&lt;/p&gt;&lt;/div&gt;'</span>,</div><div class="line">        <span class="string">'scope'</span> : <span class="literal">true</span>,</div><div class="line">        <span class="string">'replace'</span> : <span class="literal">true</span>,</div><div class="line">        <span class="string">'controller'</span> : <span class="function"><span class="keyword">function</span>(<span class="params">$scope</span>) </span>&#123;</div><div class="line">             $scope.$on(<span class="string">'chatRoom'</span>, <span class="function"><span class="keyword">function</span>(<span class="params">e, newLocation</span>) </span>&#123;</div><div class="line">                $scope.content = newLocation;</div><div class="line">             &#125;);</div><div class="line">        &#125;</div><div class="line">    &#125;;</div><div class="line">&#125;]);</div></pre></td></tr></table></figure>
<p><a href="http://jsbin.com/makoxo/6/edit?html,js,output" target="_blank" rel="external">view JSbin</a></p>
]]></content>
    
    <summary type="html">
    
      &lt;h3 id=&quot;指令与控制器之间通信&quot;&gt;&lt;a href=&quot;#指令与控制器之间通信&quot; class=&quot;headerlink&quot; title=&quot;指令与控制器之间通信&quot;&gt;&lt;/a&gt;指令与控制器之间通信&lt;/h3&gt;&lt;ol&gt;
&lt;li&gt;通过指令自身参数&lt;/li&gt;
&lt;li&gt;基于event传播的方式&lt;/
    
    </summary>
    
      <category term="angular" scheme="http://wodewone.com/categories/angular/"/>
    
    
      <category term="angular" scheme="http://wodewone.com/tags/angular/"/>
    
      <category term="javascript" scheme="http://wodewone.com/tags/javascript/"/>
    
  </entry>
  
  <entry>
    <title>ionic中ionicView的生命周期</title>
    <link href="http://wodewone.com/2016/10/11/ionic%E4%B8%ADionicView%E7%9A%84%E7%94%9F%E5%91%BD%E5%91%A8%E6%9C%9F/"/>
    <id>http://wodewone.com/2016/10/11/ionic中ionicView的生命周期/</id>
    <published>2016-10-11T12:31:09.000Z</published>
    <updated>2016-11-26T13:25:32.000Z</updated>
    
    <content type="html"><![CDATA[<h3 id="ionic中ionicView的生命周期"><a href="#ionic中ionicView的生命周期" class="headerlink" title="ionic中ionicView的生命周期"></a>ionic中ionicView的生命周期</h3><p>ionicView的生命周期的事件调用在每个 <code>ionicView</code> 的 <code>controller</code> 中使用 <code>$scope.$on(&#39;$ionicView.enter&#39;, function() {});</code> 调用。</p>
<ol>
<li><p><code>$ionicView.loaded</code>    该观点已经加载。此事件仅一次按次被创建并添加到DOM发生。如果视图离开，但被缓存，那么这个事件将不会再在随后观看射击。<br>加载的事件是好地方，把你的设置代码的视图; 然而，这是不推荐的事件收听时的图变得活跃。<br>类似于<code>Android</code>的<code>activity</code>中的<code>onCreate()</code>方法。</p>
</li>
<li><p><code>$ionicView.enter</code>    该观点已经全面进入，现在是活动视图。此事件将触发，无论是第一次负荷或缓存的视图。<br>类似于<code>Android</code>的<code>activity</code>中的<code>onStart()</code>方法。</p>
</li>
<li><p><code>$ionicView.leave</code>    该观点已经完成离开，不再是积极的看法。此事件将触发，无论是缓存或销毁。<br>类似于<code>Android</code>的<code>activity</code>中的<code>onStop()</code>方法。</p>
</li>
<li><p><code>$ionicView.beforeEnter</code>    视图是即将进入并成为活动视图。<br>类似于<code>Android</code>的<code>activity</code>中的<code>onResume()</code>方法。</p>
</li>
<li><p><code>$ionicView.beforeLeave</code>    视图是即将离开，不再是活动视图。<br>类似于<code>Android</code>的<code>activity</code>中的<code>onPause()</code>方法。</p>
</li>
<li><p><code>$ionicView.afterEnter</code>    该观点已经全面进入，现在是活动视图。</p>
</li>
<li><p><code>$ionicView.afterLeave</code>    该观点已经完成离开，不再是积极的看法。</p>
</li>
<li><p><code>$ionicView.unloaded</code>    该视图的控制器已经被破坏，它的元素已经从DOM中删除。<br>类似于<code>Android</code>的<code>activity</code>中的<code>onDestroy()</code>方法。</p>
</li>
</ol>
]]></content>
    
    <summary type="html">
    
      &lt;h3 id=&quot;ionic中ionicView的生命周期&quot;&gt;&lt;a href=&quot;#ionic中ionicView的生命周期&quot; class=&quot;headerlink&quot; title=&quot;ionic中ionicView的生命周期&quot;&gt;&lt;/a&gt;ionic中ionicView的生命周期&lt;/h3&gt;&lt;
    
    </summary>
    
      <category term="ionic" scheme="http://wodewone.com/categories/ionic/"/>
    
    
      <category term="ionic" scheme="http://wodewone.com/tags/ionic/"/>
    
  </entry>
  
  <entry>
    <title>如何理解Web语义化</title>
    <link href="http://wodewone.com/2016/10/01/%E5%A6%82%E4%BD%95%E7%90%86%E8%A7%A3Web%E8%AF%AD%E4%B9%89%E5%8C%96/"/>
    <id>http://wodewone.com/2016/10/01/如何理解Web语义化/</id>
    <published>2016-10-01T07:05:57.000Z</published>
    <updated>2016-12-01T07:34:59.000Z</updated>
    
    <content type="html"><![CDATA[<h3 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h3><p>关于 web 语义化。<br>什么是语义化？首先我想到了 <code>html</code> 语义化标签，语义化标签不过是 <code>web</code> 语义化的一个提现和一个方面，当 <code>web</code> 刚开始出现的时候其实已经开始有这种提现了，比如文本段落是 <code>p</code> 、标题 <code>h1 h2 h3 h4 h5 h6</code> 、 图片是 <code>img</code> 可以说这些也是具有语义化作用的，但是随着互联网的壮大，形形色色的各种内容出现，在用这些内容显示完全不能够满足当下的需求，单单凭借人工分类区分是完全不可能的，所以这个时候我们需要让计算机也需要掌握这些分类的技能。</p>
<p><img src="/2016/10/01/如何理解Web语义化/web.jpg" alt="web"></p>
<blockquote>
<p>此处出自知乎<br>这个图的意思是说，内容的语义表达能力和 AI 的智能程度决定了机器分析处理 Web 内容能力的高低。<br><a href="https://www.zhihu.com/question/20455165/answer/" target="_blank" rel="external">什么是语义化?</a></p>
</blockquote>
<p>从服务器角度来说：通过语义化让搜索引擎作出更快更好检索，从而帮助人们更快更好的展现他们所需要的内容，当然这个不是主要条件，但是更容易理解的语义化内容，确实会影响到搜索的内容精度。</p>
<p>从客户端角度来说：语义化内容可以更方便人们阅读，当样式文件丢失或着加载失败时，浏览器依然可以以一个较好的格式去显示内容，提高体验程度。</p>
<p>从开发者角度来说：一篇有良好的编码的文章比一篇杂乱无章的文章更让人有阅读欲，代码也是一样，有的代码像是漂亮的文章，有些代码就是恶心人的一坨，让人看都不愿意看，这样的代码谁愿意看，更不要提去改了，语义化内容可以帮助开发者更好的开发维护代码，我相信这一点毋容置疑~</p>
<p>作为一个 jsser 我觉得写代码应该是一件优雅的事情，而不是一段敲键盘的体验……<br>不知道我说的对不对，反正我已经说了，哈哈哈哈哈哈哈哈</p>
<h3 id="参考内容"><a href="#参考内容" class="headerlink" title="参考内容"></a>参考内容</h3><p>本文参考知乎问题编写<br>原文: <a href="https://www.zhihu.com/question/20455165" target="_blank" rel="external">如何理解 Web 语义化？</a></p>
]]></content>
    
    <summary type="html">
    
      &lt;h3 id=&quot;前言&quot;&gt;&lt;a href=&quot;#前言&quot; class=&quot;headerlink&quot; title=&quot;前言&quot;&gt;&lt;/a&gt;前言&lt;/h3&gt;&lt;p&gt;关于 web 语义化。&lt;br&gt;什么是语义化？首先我想到了 &lt;code&gt;html&lt;/code&gt; 语义化标签，语义化标签不过是 &lt;code&gt;we
    
    </summary>
    
      <category term="html" scheme="http://wodewone.com/categories/html/"/>
    
    
      <category term="web" scheme="http://wodewone.com/tags/web/"/>
    
      <category term="html" scheme="http://wodewone.com/tags/html/"/>
    
  </entry>
  
  <entry>
    <title>解决-webkit-filter:grayscale(100%)在retina下的模糊问题</title>
    <link href="http://wodewone.com/2016/09/11/%E8%A7%A3%E5%86%B3-webkit-filter-grayscale-100-%E5%9C%A8retina%E4%B8%8B%E7%9A%84%E6%A8%A1%E7%B3%8A%E9%97%AE%E9%A2%98/"/>
    <id>http://wodewone.com/2016/09/11/解决-webkit-filter-grayscale-100-在retina下的模糊问题/</id>
    <published>2016-09-11T12:10:58.000Z</published>
    <updated>2016-12-03T13:36:27.000Z</updated>
    
    <content type="html"><![CDATA[<h3 id="你猜"><a href="#你猜" class="headerlink" title="你猜"></a>你猜</h3><p>在某些特定条件下需要将网站的某部分内容，或者全部内容色菜去除，<br>如果只是背景或者文字的话很简单</p>
<figure class="highlight css"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line"><span class="selector-tag">background</span>: <span class="selector-tag">gray</span>;</div><div class="line"><span class="selector-tag">color</span>: <span class="selector-tag">gray</span>;</div></pre></td></tr></table></figure>
<p>两句话就可以了;</p>
<blockquote>
<p>思考题：但是如果需要将网站里面的图片也全部都改成灰色呢？<br>难道需要我们的美术老师加班加点的把所有的图片都在做一遍嘛~</p>
<p>答案：NO！<br>怎么可能有着么劳民伤财的方法呢，哈哈哈啊哈~~~</p>
</blockquote>
<p>css 一句话搞定</p>
<figure class="highlight css"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line"><span class="selector-tag">-webkit-filter</span>: <span class="selector-tag">grayscale</span>(100%);</div><div class="line"><span class="selector-tag">filter</span>: <span class="selector-tag">grayscale</span>(100%);</div></pre></td></tr></table></figure>
<p>(此方式仅限现代浏览器使用，IE 浏览器请自行google，此处不赘述)</p>
<p>然后某日突然发下一个问题</p>
<p>那就是在 ios 里 retina 屏幕里面有模糊；<br>一番搜索后发现这个方法，在对应变灰的地方同时加上这句：</p>
<figure class="highlight css"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line"><span class="selector-tag">-webkit-transform</span>: <span class="selector-tag">translateZ</span>(0);</div></pre></td></tr></table></figure>
<p>经测试可用~</p>
]]></content>
    
    <summary type="html">
    
      &lt;h3 id=&quot;你猜&quot;&gt;&lt;a href=&quot;#你猜&quot; class=&quot;headerlink&quot; title=&quot;你猜&quot;&gt;&lt;/a&gt;你猜&lt;/h3&gt;&lt;p&gt;在某些特定条件下需要将网站的某部分内容，或者全部内容色菜去除，&lt;br&gt;如果只是背景或者文字的话很简单&lt;/p&gt;
&lt;figure class=&quot;
    
    </summary>
    
      <category term="css" scheme="http://wodewone.com/categories/css/"/>
    
    
      <category term="css" scheme="http://wodewone.com/tags/css/"/>
    
      <category term="css-filter" scheme="http://wodewone.com/tags/css-filter/"/>
    
  </entry>
  
  <entry>
    <title>Angular：指令/Controller数据共享</title>
    <link href="http://wodewone.com/2016/09/06/Angular%EF%BC%9A%E6%8C%87%E4%BB%A4-Controller%E6%95%B0%E6%8D%AE%E5%85%B1%E4%BA%AB/"/>
    <id>http://wodewone.com/2016/09/06/Angular：指令-Controller数据共享/</id>
    <published>2016-09-06T08:29:40.000Z</published>
    <updated>2016-12-03T13:44:09.000Z</updated>
    
    <content type="html"><![CDATA[<h2 id="Directive与Controller数据共享"><a href="#Directive与Controller数据共享" class="headerlink" title="Directive与Controller数据共享"></a>Directive与Controller数据共享</h2><p>在指令中，不仅仅需要指令配置信息，很多时候也需要获取 <code>$scope</code> 的相关数据。那么，如何在指令中拿到 <code>$scope</code> 的数据呢？</p>
<h3 id="Directive和Controller使用同一个scope"><a href="#Directive和Controller使用同一个scope" class="headerlink" title="Directive和Controller使用同一个scope"></a>Directive和Controller使用同一个scope</h3><figure class="highlight html"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div></pre></td><td class="code"><pre><div class="line"><span class="meta">&lt;!doctype html&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">html</span>&gt;</span></div><div class="line">  <span class="tag">&lt;<span class="name">head</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">"utf-8"</span> /&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">title</span>&gt;</span>Angular Demo<span class="tag">&lt;/<span class="name">title</span>&gt;</span></div><div class="line">  <span class="tag">&lt;/<span class="name">head</span>&gt;</span></div><div class="line">  <span class="tag">&lt;<span class="name">body</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">ng-controller</span>=<span class="string">"DemoCtrl"</span>&gt;</span></div><div class="line">      <span class="tag">&lt;<span class="name">d1</span>&gt;</span><span class="tag">&lt;/<span class="name">d1</span>&gt;</span></div><div class="line">    <span class="tag">&lt;/<span class="name">div</span>&gt;</span></div><div class="line"></div><div class="line">    <span class="comment">&lt;!-- 脚本区域 --&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">script</span> <span class="attr">src</span>=<span class="string">"https://ajax.googleapis.com/ajax/libs/angularjs/1.3.15/angular.min.js"</span>&gt;</span><span class="undefined"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="javascript"></span></div><div class="line">      angular.module(<span class="string">'app'</span>, [])</div><div class="line">      .directive(<span class="string">'d1'</span>, [<span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</div><div class="line">        <span class="keyword">return</span> &#123;</div><div class="line">          <span class="attr">restrict</span>: <span class="string">'E'</span>,</div><div class="line">          <span class="attr">scope</span>: <span class="literal">false</span>, <span class="comment">//defualt value is false</span></div><div class="line">          template: <span class="string">'&lt;h1&gt;Hi,&#123;&#123;name&#125;&#125;&lt;/h1&gt;'</span>,</div><div class="line">          <span class="attr">link</span>: <span class="function"><span class="keyword">function</span>(<span class="params">scope, iElement, iAttrs</span>)</span>&#123;</div><div class="line">            <span class="built_in">console</span>.log(<span class="string">'directive scope id = '</span> + scope.$id);</div><div class="line">          &#125;</div><div class="line">        &#125;</div><div class="line">      &#125;])</div><div class="line">      .controller(<span class="string">'DemoCtrl'</span>, [<span class="string">'$scope'</span>, <span class="function"><span class="keyword">function</span>(<span class="params">$scope</span>)</span>&#123;</div><div class="line">        <span class="built_in">console</span>.log(<span class="string">'controller scope id = '</span> + $scope.$id);</div><div class="line">        $scope.name = <span class="string">'Jay'</span>;</div><div class="line">      &#125;]);</div><div class="line"></div><div class="line">      <span class="comment">//可以采用如此方式启动angular扫描，或者直接使用ng-app="app"</span></div><div class="line">      angular.bootstrap(<span class="built_in">document</span>.body, [<span class="string">'app'</span>]);</div><div class="line">    <span class="tag">&lt;/<span class="name">script</span>&gt;</span></div><div class="line">    <span class="comment">&lt;!-- 脚本区域 End --&gt;</span></div><div class="line">  <span class="tag">&lt;/<span class="name">body</span>&gt;</span></div><div class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></div></pre></td></tr></table></figure>
<p>执行以上代码，页面显示Hi Jay，并在控制台打印</p>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">controller scope id = 2</div><div class="line">directive scope id = 2</div></pre></td></tr></table></figure>
<p>在指令中，默认会直接使用上级的scope，从控制台来看，先执行<code>controller</code>的<code>scope</code>，再执行<code>directive</code>的<code>scope</code>。因为id一致，所以是同一个<code>scope</code>。既然是同一个<code>scope</code>，那么共享数据自然就不是问题了。该方式，适合业务性质的<code>directive</code>，如果是公共的<code>directive</code>，不建议使用此方式，可能会导致<code>scope</code>杂乱。</p>
<h3 id="在指令作用域中使用-，将当前属性作为字符串传递"><a href="#在指令作用域中使用-，将当前属性作为字符串传递" class="headerlink" title="在指令作用域中使用@，将当前属性作为字符串传递"></a>在指令作用域中使用@，将当前属性作为字符串传递</h3><figure class="highlight html"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div></pre></td><td class="code"><pre><div class="line"><span class="meta">&lt;!doctype html&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">html</span>&gt;</span></div><div class="line">  <span class="tag">&lt;<span class="name">head</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">"utf-8"</span> /&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">title</span>&gt;</span>Angular Demo<span class="tag">&lt;/<span class="name">title</span>&gt;</span></div><div class="line">  <span class="tag">&lt;/<span class="name">head</span>&gt;</span></div><div class="line">  <span class="tag">&lt;<span class="name">body</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">ng-controller</span>=<span class="string">"DemoCtrl"</span>&gt;</span></div><div class="line">      <span class="tag">&lt;<span class="name">d1</span> <span class="attr">name</span>=<span class="string">"&#123;&#123;key&#125;&#125;"</span>&gt;</span><span class="tag">&lt;/<span class="name">d1</span>&gt;</span></div><div class="line">    <span class="tag">&lt;/<span class="name">div</span>&gt;</span></div><div class="line"></div><div class="line">    <span class="comment">&lt;!-- 脚本区域 --&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">script</span> <span class="attr">src</span>=<span class="string">"https://ajax.googleapis.com/ajax/libs/angularjs/1.3.15/angular.min.js"</span>&gt;</span><span class="undefined"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="javascript"></span></div><div class="line">      angular.module(<span class="string">'app'</span>, [])</div><div class="line">      .directive(<span class="string">'d1'</span>, [<span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</div><div class="line">        <span class="keyword">return</span> &#123;</div><div class="line">          <span class="attr">restrict</span>: <span class="string">'E'</span>,</div><div class="line">          <span class="attr">scope</span>: &#123;</div><div class="line">            <span class="attr">name</span>: <span class="string">'@'</span></div><div class="line">          &#125;,</div><div class="line">          <span class="attr">template</span>: <span class="string">'&lt;h1&gt;Hi,&#123;&#123;name&#125;&#125;&lt;/h1&gt;'</span>,</div><div class="line">          <span class="attr">link</span>: <span class="function"><span class="keyword">function</span>(<span class="params">scope, iElement, iAttrs</span>)</span>&#123;</div><div class="line">            <span class="built_in">console</span>.log(<span class="string">'directive scope id = '</span> + scope.$id);</div><div class="line">          &#125;</div><div class="line">        &#125;</div><div class="line">      &#125;])</div><div class="line">      .controller(<span class="string">'DemoCtrl'</span>, [<span class="string">'$scope'</span>, <span class="function"><span class="keyword">function</span>(<span class="params">$scope</span>)</span>&#123;</div><div class="line">        <span class="built_in">console</span>.log(<span class="string">'controller scope id = '</span> + $scope.$id);</div><div class="line">        $scope.key = <span class="string">'Jay'</span>;</div><div class="line"></div><div class="line">      &#125;]);</div><div class="line"></div><div class="line">      <span class="comment">//可以采用如此方式启动angular扫描，或者直接使用ng-app="app"</span></div><div class="line">      angular.bootstrap(<span class="built_in">document</span>.body, [<span class="string">'app'</span>]);</div><div class="line">    <span class="tag">&lt;/<span class="name">script</span>&gt;</span></div><div class="line">    <span class="comment">&lt;!-- 脚本区域 End --&gt;</span></div><div class="line">  <span class="tag">&lt;/<span class="name">body</span>&gt;</span></div><div class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></div></pre></td></tr></table></figure>
<p>以上代码，主要修改了指令的<code>scope</code>，从输出来看，指令和<code>controller</code>各自是自己独有的作用域。</p>
<p><code>scope = {name: &#39;@&#39;}</code>，等价于</p>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">link:<span class="function"><span class="keyword">function</span>(<span class="params">scope, iElement, iAttrs</span>)</span>&#123;</div><div class="line">    scope.name = iAttrs.name;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p><code>Controller</code>中的key的变化，会即时影响到<code>Directive</code>的变化，但是<code>Directive</code>的变化并不会反向影响到<code>Controller</code>，结果近似于单向绑定。</p>
<h3 id="在指令的作用域中使用-，进行数据的双向绑定"><a href="#在指令的作用域中使用-，进行数据的双向绑定" class="headerlink" title="在指令的作用域中使用=，进行数据的双向绑定"></a>在指令的作用域中使用=，进行数据的双向绑定</h3><figure class="highlight html"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div></pre></td><td class="code"><pre><div class="line"><span class="meta">&lt;!doctype html&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">html</span>&gt;</span></div><div class="line">  <span class="tag">&lt;<span class="name">head</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">"utf-8"</span> /&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">title</span>&gt;</span>Angular Demo<span class="tag">&lt;/<span class="name">title</span>&gt;</span></div><div class="line">  <span class="tag">&lt;/<span class="name">head</span>&gt;</span></div><div class="line">  <span class="tag">&lt;<span class="name">body</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">ng-controller</span>=<span class="string">"DemoCtrl"</span>&gt;</span></div><div class="line">      key = &#123;&#123;key&#125;&#125;</div><div class="line">      <span class="tag">&lt;<span class="name">d1</span> <span class="attr">name</span>=<span class="string">"key"</span>&gt;</span><span class="tag">&lt;/<span class="name">d1</span>&gt;</span></div><div class="line">    <span class="tag">&lt;/<span class="name">div</span>&gt;</span></div><div class="line"></div><div class="line">    <span class="comment">&lt;!-- 脚本区域 --&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">script</span> <span class="attr">src</span>=<span class="string">"https://ajax.googleapis.com/ajax/libs/angularjs/1.3.15/angular.min.js"</span>&gt;</span><span class="undefined"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="javascript"></span></div><div class="line">      angular.module(<span class="string">'app'</span>, [])</div><div class="line">      .directive(<span class="string">'d1'</span>, [<span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</div><div class="line">        <span class="keyword">return</span> &#123;</div><div class="line">          <span class="attr">restrict</span>: <span class="string">'E'</span>,</div><div class="line">          <span class="attr">scope</span>: &#123;</div><div class="line">            <span class="attr">name</span>: <span class="string">'='</span></div><div class="line">          &#125;,</div><div class="line">          <span class="attr">template</span>: <span class="string">'&lt;h1&gt;Hi,&#123;&#123;name&#125;&#125;&lt;/h1&gt;&lt;input type="text" ng-model="name" /&gt;'</span>,</div><div class="line">          <span class="attr">link</span>: <span class="function"><span class="keyword">function</span>(<span class="params">scope, iElement, iAttrs</span>)</span>&#123;</div><div class="line">            <span class="built_in">console</span>.log(<span class="string">'directive scope id = '</span> + scope.$id);</div><div class="line">          &#125;</div><div class="line">        &#125;</div><div class="line">      &#125;])</div><div class="line">      .controller(<span class="string">'DemoCtrl'</span>, [<span class="string">'$scope'</span>, <span class="function"><span class="keyword">function</span>(<span class="params">$scope</span>)</span>&#123;</div><div class="line">        <span class="built_in">console</span>.log(<span class="string">'controller scope id = '</span> + $scope.$id);</div><div class="line">        $scope.key = <span class="string">'Jay'</span>;</div><div class="line"></div><div class="line">      &#125;]);</div><div class="line"></div><div class="line">      <span class="comment">//可以采用如此方式启动angular扫描，或者直接使用ng-app="app"</span></div><div class="line">      angular.bootstrap(<span class="built_in">document</span>.body, [<span class="string">'app'</span>]);</div><div class="line">    <span class="tag">&lt;/<span class="name">script</span>&gt;</span></div><div class="line">    <span class="comment">&lt;!-- 脚本区域 End --&gt;</span></div><div class="line">  <span class="tag">&lt;/<span class="name">body</span>&gt;</span></div><div class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></div></pre></td></tr></table></figure>
<p>以上代码的变化在于，使用了<code>scope: {name: &#39;=&#39;}</code>，该代码将父作用域的属性和指令的属性进行双向绑定。所以指令中文本框的值的变化，将会同步影响<code>controller</code>中key的变化。</p>
<p><strong>注意：在使用指令的时候，html代码，并不是和示例1.1一致了，如果是双向绑定，那么应该使用<code>&lt;d1 name=&quot;key&quot; /&gt;;</code>，而不是 <code>&lt;d1 name=&quot;&quot; /&gt;</code>。</strong></p>
<h3 id="在Directive中调用Controller的方法"><a href="#在Directive中调用Controller的方法" class="headerlink" title="在Directive中调用Controller的方法"></a>在Directive中调用Controller的方法</h3><pre><code>&lt;!doctype html&gt;
&lt;html&gt;
  &lt;head&gt;
    &lt;meta charset=&quot;utf-8&quot; /&gt;
    &lt;title&gt;Angular Demo&lt;/title&gt;
  &lt;/head&gt;
  &lt;body ng-app=&quot;app&quot;&gt;
    &lt;div ng-controller=&quot;DemoCtrl&quot;&gt;
      key = {{key}}
      &lt;d1 name=&quot;key&quot; show-name=&quot;show(key)&quot;&gt;&lt;/d1&gt;
    &lt;/div&gt;

    &lt;!-- 脚本区域 --&gt;
    &lt;script src=&quot;https://ajax.googleapis.com/ajax/libs/angularjs/1.3.15/angular.min.js&quot;&gt;&lt;/script&gt;
    &lt;script&gt;
      angular.module(&apos;app&apos;, [])
      .directive(&apos;d1&apos;, [function(){
        return {
          restrict: &apos;E&apos;,
          scope: {
            name: &apos;=&apos;,
            showName: &apos;&amp;&apos;
          },
          template: &apos;&lt;h1&gt;Hi,{{name}}&lt;/h1&gt;&lt;input type=&quot;text&quot; ng-model=&quot;name&quot; /&gt;&apos; 
          + &apos;&lt;button ng-click=&quot;showName(name)&quot;&gt;Show&lt;/button&gt;&apos;,
          link: function(scope, iElement, iAttrs){
            console.log(&apos;directive scope id = &apos; + scope.$id);
          }
        }
      }])
      .controller(&apos;DemoCtrl&apos;, [&apos;$scope&apos;, function($scope){
        console.log(&apos;controller scope id = &apos; + $scope.$id);
        $scope.key = &apos;Jay&apos;;
        $scope.show = function(name){
            alert(name);
        };
      }]);
    &lt;/script&gt;
    &lt;!-- 脚本区域 End --&gt;
  &lt;/body&gt;
&lt;/html&gt;
</code></pre><p>点击指令生成的按钮，会执行<code>controller</code>的<code>show</code>方法，利用在<code>scope: {showName: &#39;&amp;&#39;}</code>，可以将父级作用域的方法绑定到指令中。</p>
<p><strong>注意，一定要注意属性命令，在html中书写showName，那么在iAttrs中对应<code>showname</code>，只有在html中书写<code>show-name</code>,在会在iAttrs中对应<code>showName</code>。</strong></p>
<h2 id="在controller中，拿到directive的作用域"><a href="#在controller中，拿到directive的作用域" class="headerlink" title="在controller中，拿到directive的作用域"></a>在controller中，拿到directive的作用域</h2><h3 id="拿到scope的元素，调用isolateScope获取scope"><a href="#拿到scope的元素，调用isolateScope获取scope" class="headerlink" title="拿到scope的元素，调用isolateScope获取scope"></a>拿到scope的元素，调用isolateScope获取scope</h3><figure class="highlight html"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div></pre></td><td class="code"><pre><div class="line"><span class="meta">&lt;!doctype html&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">html</span>&gt;</span></div><div class="line">  <span class="tag">&lt;<span class="name">head</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">"utf-8"</span> /&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">title</span>&gt;</span>Angular Demo<span class="tag">&lt;/<span class="name">title</span>&gt;</span></div><div class="line">  <span class="tag">&lt;/<span class="name">head</span>&gt;</span></div><div class="line">  <span class="tag">&lt;<span class="name">body</span> <span class="attr">ng-app</span>=<span class="string">"app"</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">ng-controller</span>=<span class="string">"DemoCtrl"</span>&gt;</span></div><div class="line">      key = &#123;&#123;key&#125;&#125;</div><div class="line">      <span class="tag">&lt;<span class="name">button</span> <span class="attr">ng-click</span>=<span class="string">"click()"</span>&gt;</span>Click<span class="tag">&lt;/<span class="name">button</span>&gt;</span></div><div class="line">      <span class="tag">&lt;<span class="name">hr</span> /&gt;</span></div><div class="line">      <span class="tag">&lt;<span class="name">d1</span> <span class="attr">id</span>=<span class="string">"d1"</span> <span class="attr">name</span>=<span class="string">"key"</span> <span class="attr">show-name</span>=<span class="string">"show(key)"</span>&gt;</span><span class="tag">&lt;/<span class="name">d1</span>&gt;</span></div><div class="line">    <span class="tag">&lt;/<span class="name">div</span>&gt;</span></div><div class="line"></div><div class="line">    <span class="comment">&lt;!-- 脚本区域 --&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">script</span> <span class="attr">src</span>=<span class="string">"//ajax.aspnetcdn.com/ajax/jQuery/jquery-2.1.3.min.js"</span>&gt;</span><span class="undefined"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">script</span> <span class="attr">src</span>=<span class="string">"https://ajax.googleapis.com/ajax/libs/angularjs/1.3.15/angular.min.js"</span>&gt;</span><span class="undefined"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="javascript"></span></div><div class="line">      angular.module(<span class="string">'app'</span>, [])</div><div class="line">      .directive(<span class="string">'d1'</span>, [<span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</div><div class="line">        <span class="keyword">return</span> &#123;</div><div class="line">          <span class="attr">restrict</span>: <span class="string">'E'</span>,</div><div class="line">          <span class="attr">scope</span>: &#123;&#125;, <span class="comment">//等价于 scope: true</span></div><div class="line">          template: <span class="string">'&lt;h1&gt;Hi,&#123;&#123;name&#125;&#125;'</span>,</div><div class="line">          <span class="attr">link</span>: <span class="function"><span class="keyword">function</span>(<span class="params">scope, iElement, iAttrs</span>)</span>&#123;</div><div class="line">            scope.name = <span class="string">'directive name'</span>;</div><div class="line">            <span class="built_in">console</span>.log(<span class="string">'directive scope id = '</span> + scope.$id);</div><div class="line">          &#125;</div><div class="line">        &#125;</div><div class="line">      &#125;])</div><div class="line">      .controller(<span class="string">'DemoCtrl'</span>, [<span class="string">'$scope'</span>, <span class="function"><span class="keyword">function</span>(<span class="params">$scope</span>)</span>&#123;</div><div class="line">        <span class="built_in">console</span>.log(<span class="string">'controller scope id = '</span> + $scope.$id);</div><div class="line">        $scope.click = <span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</div><div class="line">          <span class="keyword">var</span> dirScope = $(<span class="string">'#d1'</span>).isolateScope();</div><div class="line">          alert(dirScope.name);</div><div class="line">        &#125;</div><div class="line">      &#125;]);</div><div class="line">    <span class="tag">&lt;/<span class="name">script</span>&gt;</span></div><div class="line">    <span class="comment">&lt;!-- 脚本区域 End --&gt;</span></div><div class="line">  <span class="tag">&lt;/<span class="name">body</span>&gt;</span></div><div class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></div></pre></td></tr></table></figure>
<p>此代码中，利用 <code>$(&#39;#d1&#39;).isolateScope</code> ，拿到了该指令的<code>scope</code>，所以可以随时方式，该方式在多种指令中也有效。</p>
<p><strong>如果判断应该用 <code>isolateScope()</code> 还是 <code>scope()</code> 获取作用域？一个最简单的方式，用F12查看源码，找到该元素，然后查看 <code>class</code> 是<code>ng-isolate-scope</code> 还是 <code>ng-scope</code> </strong></p>
<h2 id="3、-指令之间相互获取数据"><a href="#3、-指令之间相互获取数据" class="headerlink" title="3、 指令之间相互获取数据"></a>3、 指令之间相互获取数据</h2><h3 id="3-1、通过directive依赖来共享数据"><a href="#3-1、通过directive依赖来共享数据" class="headerlink" title="3.1、通过directive依赖来共享数据"></a>3.1、通过directive依赖来共享数据</h3><figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div></pre></td><td class="code"><pre><div class="line">&lt;script&gt;</div><div class="line">      angular.module(<span class="string">'app'</span>, [])</div><div class="line">      .directive(<span class="string">'d1'</span>, [<span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</div><div class="line">        <span class="keyword">return</span> &#123;</div><div class="line">          <span class="attr">restrict</span>: <span class="string">'E'</span>,</div><div class="line">          <span class="attr">require</span>: <span class="string">'^ngModel'</span>,</div><div class="line">          <span class="attr">scope</span>: &#123;&#125;, <span class="comment">//等价于 scope: true</span></div><div class="line">          template: <span class="literal">false</span>,</div><div class="line">          <span class="attr">link</span>: <span class="function"><span class="keyword">function</span>(<span class="params">scope, iElement, iAttrs, ngModelCtrl</span>)</span>&#123;</div><div class="line">            </div><div class="line">          &#125;</div><div class="line">        &#125;</div><div class="line">      &#125;])</div><div class="line">      .controller(<span class="string">'DemoCtrl'</span>, [<span class="string">'$scope'</span>, <span class="function"><span class="keyword">function</span>(<span class="params">$scope</span>)</span>&#123;</div><div class="line">        </div><div class="line">      &#125;]);</div><div class="line"><span class="xml"><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span></div></pre></td></tr></table></figure>
<h3 id="通过如2-1的方式获取数据"><a href="#通过如2-1的方式获取数据" class="headerlink" title="通过如2.1的方式获取数据"></a>通过如2.1的方式获取数据</h3><h2 id="其他Hacky的方式"><a href="#其他Hacky的方式" class="headerlink" title="其他Hacky的方式"></a>其他Hacky的方式</h2><ol>
<li>通过<code>$parent</code>访问父级作用域</li>
<li>通过<code>$$prevSibling</code>访问该作用域的上一个兄弟作用域</li>
<li>通过<code>$$nextSibling</code>访问该作用域的下一个兄弟作用域</li>
<li>通过<code>$$childHead</code>访问儿子作用域的第一个</li>
<li>通过<code>$$childTail</code>访问儿子作用域的最后一个</li>
</ol>
<h2 id="参考资料"><a href="#参考资料" class="headerlink" title="参考资料"></a>参考资料</h2><ol>
<li><p><a href="http://tech.blinemedical.com/sharing-data-between-child-and-parent-directives-and-scopes-in-angularjs/" target="_blank" rel="external">SHARING DATA BETWEEN CHILD AND PARENT DIRECTIVES AND SCOPES (IN ANGULARJS)</a></p>
</li>
<li><p><a href="http://www.cnblogs.com/bigdataZJ/p/AngularJS1.html" target="_blank" rel="external">directive和controller如何通信</a></p>
</li>
</ol>
]]></content>
    
    <summary type="html">
    
      &lt;h2 id=&quot;Directive与Controller数据共享&quot;&gt;&lt;a href=&quot;#Directive与Controller数据共享&quot; class=&quot;headerlink&quot; title=&quot;Directive与Controller数据共享&quot;&gt;&lt;/a&gt;Directive与Cont
    
    </summary>
    
      <category term="angular" scheme="http://wodewone.com/categories/angular/"/>
    
    
      <category term="angular" scheme="http://wodewone.com/tags/angular/"/>
    
      <category term="javascript" scheme="http://wodewone.com/tags/javascript/"/>
    
  </entry>
  
  <entry>
    <title>angular实现changeFile上传[方法一]</title>
    <link href="http://wodewone.com/2016/08/27/angular%E5%AE%9E%E7%8E%B0changeFile%E4%B8%8A%E4%BC%A0-%E6%96%B9%E6%B3%95%E4%B8%80/"/>
    <id>http://wodewone.com/2016/08/27/angular实现changeFile上传-方法一/</id>
    <published>2016-08-27T11:27:15.000Z</published>
    <updated>2016-11-26T11:29:02.000Z</updated>
    
    <content type="html"><![CDATA[<h3 id="angular实现changeFile上传-方法一"><a href="#angular实现changeFile上传-方法一" class="headerlink" title="angular实现changeFile上传[方法一]"></a>angular实现changeFile上传[方法一]</h3><figure class="highlight html"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">ng-controller</span>=<span class="string">"MyCtrl"</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">"file"</span> <span class="attr">onchange</span>=<span class="string">"MyCtrl.prototype.setFile(this)"</span>&gt;</span></div><div class="line">    &#123;&#123;theFile.name&#125;&#125;</div><div class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></div></pre></td></tr></table></figure>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">var</span> myApp = angular.module(<span class="string">'myApp'</span>,[]);</div><div class="line"></div><div class="line"><span class="function"><span class="keyword">function</span> <span class="title">MyCtrl</span>(<span class="params">$scope, $window</span>) </span>&#123;</div><div class="line">    $scope.name = <span class="string">'Superhero'</span>;</div><div class="line">    MyCtrl.prototype.$scope = $scope;</div><div class="line">&#125;</div><div class="line"></div><div class="line">MyCtrl.prototype.setFile = <span class="function"><span class="keyword">function</span>(<span class="params">element</span>) </span>&#123;</div><div class="line">    <span class="keyword">var</span> $scope = <span class="keyword">this</span>.$scope;</div><div class="line">    $scope.$apply(<span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</div><div class="line">        $scope.theFile = element.files[<span class="number">0</span>];</div><div class="line">    &#125;);</div><div class="line">&#125;;</div></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      &lt;h3 id=&quot;angular实现changeFile上传-方法一&quot;&gt;&lt;a href=&quot;#angular实现changeFile上传-方法一&quot; class=&quot;headerlink&quot; title=&quot;angular实现changeFile上传[方法一]&quot;&gt;&lt;/a&gt;angular实现c
    
    </summary>
    
      <category term="angular" scheme="http://wodewone.com/categories/angular/"/>
    
    
      <category term="angular" scheme="http://wodewone.com/tags/angular/"/>
    
  </entry>
  
  <entry>
    <title>angular实现changeFile上传[方法三]</title>
    <link href="http://wodewone.com/2016/08/27/angular%E5%AE%9E%E7%8E%B0changeFile%E4%B8%8A%E4%BC%A0-%E6%96%B9%E6%B3%95%E4%B8%89/"/>
    <id>http://wodewone.com/2016/08/27/angular实现changeFile上传-方法三/</id>
    <published>2016-08-27T05:03:46.000Z</published>
    <updated>2016-12-03T13:44:50.000Z</updated>
    
    <content type="html"><![CDATA[<p><a href="http://jsfiddle.net/sqren/27ugfym6/" target="_blank" rel="external">View JSFiddle</a></p>
<p>view.html:</p>
<figure class="highlight html"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line"><span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">"file"</span> <span class="attr">custom-on-change</span>=<span class="string">"uploadFile"</span>&gt;</span></div></pre></td></tr></table></figure>
<p>controller.js:</p>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">app.controller(<span class="string">'myCtrl'</span>, <span class="function"><span class="keyword">function</span>(<span class="params">$scope</span>)</span>&#123; $scope.uploadFile = <span class="function"><span class="keyword">function</span>(<span class="params">event</span>)</span>&#123; <span class="keyword">var</span> files = event.target.files; &#125;; &#125;);</div></pre></td></tr></table></figure>
<p>directive.js:</p>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div></pre></td><td class="code"><pre><div class="line">app.directive(<span class="string">'customOnChange'</span>, <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</div><div class="line">  <span class="keyword">return</span> &#123;</div><div class="line">    <span class="attr">restrict</span>: <span class="string">'A'</span>,</div><div class="line">    <span class="attr">link</span>: <span class="function"><span class="keyword">function</span> (<span class="params">scope, element, attrs</span>) </span>&#123;</div><div class="line">      <span class="keyword">var</span> onChangeHandler = scope.$<span class="built_in">eval</span>(attrs.customOnChange);</div><div class="line">      element.bind(<span class="string">'change'</span>, onChangeHandler);</div><div class="line">    &#125;</div><div class="line">  &#125;;</div><div class="line">&#125;);</div></pre></td></tr></table></figure>
<p><a href="http://jsfiddle.net/sqren/27ugfym6/" target="_blank" rel="external">View JSFiddle</a></p>
<p><a href="http://stackoverflow.com/questions/17922557/angularjs-how-to-check-for-changes-in-file-input-fields" target="_blank" rel="external">参考出处</a></p>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;&lt;a href=&quot;http://jsfiddle.net/sqren/27ugfym6/&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;View JSFiddle&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;view.html:&lt;/p&gt;
&lt;figure class=&quot;highl
    
    </summary>
    
      <category term="angular" scheme="http://wodewone.com/categories/angular/"/>
    
    
      <category term="angular" scheme="http://wodewone.com/tags/angular/"/>
    
      <category term="javascript" scheme="http://wodewone.com/tags/javascript/"/>
    
  </entry>
  
  <entry>
    <title>angular实现changeFile上传[方法二]</title>
    <link href="http://wodewone.com/2016/08/27/angular%E5%AE%9E%E7%8E%B0changeFile%E4%B8%8A%E4%BC%A0-%E6%96%B9%E6%B3%95%E4%BA%8C/"/>
    <id>http://wodewone.com/2016/08/27/angular实现changeFile上传-方法二/</id>
    <published>2016-08-27T04:29:18.000Z</published>
    <updated>2016-12-03T13:45:29.000Z</updated>
    
    <content type="html"><![CDATA[<h3 id="angular实现changeFile上传-方法二"><a href="#angular实现changeFile上传-方法二" class="headerlink" title="angular实现changeFile上传[方法二]"></a>angular实现changeFile上传[方法二]</h3><p>html</p>
<figure class="highlight html"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">ng-controller</span>=<span class="string">"form-cntlr"</span>&gt;</span> <span class="tag">&lt;<span class="name">form</span>&gt;</span> <span class="tag">&lt;<span class="name">button</span> <span class="attr">ng-click</span>=<span class="string">"selectFile()"</span>&gt;</span>Upload Your File<span class="tag">&lt;/<span class="name">button</span>&gt;</span> <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">"file"</span> <span class="attr">style</span>=<span class="string">"display:none"</span> <span class="attr">id</span>=<span class="string">"file"</span> <span class="attr">name</span>=<span class="string">'file'</span> <span class="attr">onchange</span>=<span class="string">"angular.element(this).scope().fileNameChanged(this)"</span> /&gt;</span> <span class="tag">&lt;/<span class="name">form</span>&gt;</span> <span class="tag">&lt;/<span class="name">div</span>&gt;</span></div></pre></td></tr></table></figure>
<p>instead of </p>
<figure class="highlight html"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line"><span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">"file"</span> <span class="attr">style</span>=<span class="string">"display:none"</span> <span class="attr">id</span>=<span class="string">"file"</span> <span class="attr">name</span>=<span class="string">'file'</span> <span class="attr">ng-Change</span>=<span class="string">"fileNameChanged()"</span> /&gt;</span></div></pre></td></tr></table></figure>
<p>can you try</p>
<figure class="highlight html"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line"><span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">"file"</span> <span class="attr">style</span>=<span class="string">"display:none"</span> <span class="attr">id</span>=<span class="string">"file"</span> <span class="attr">name</span>=<span class="string">'file'</span> <span class="attr">onchange</span>=<span class="string">"angular.element(this).scope().fileNameChanged()"</span> /&gt;</span></div></pre></td></tr></table></figure>
<p>and in your function changes instead of</p>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">$scope.fileNameChanged = <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123; alert(<span class="string">"select file"</span>); &#125;</div></pre></td></tr></table></figure>
<p>can you try</p>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">$scope.fileNameChanged = <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</div><div class="line">  <span class="built_in">console</span>.log(<span class="string">"select file"</span>);</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p><a href="http://stackoverflow.com/questions/17922557/angularjs-how-to-check-for-changes-in-file-input-fields" target="_blank" rel="external">参考出处1</a></p>
<p><a href="https://github.com/angular/angular.js/issues/1375" target="_blank" rel="external">参考出处2</a></p>
]]></content>
    
    <summary type="html">
    
      &lt;h3 id=&quot;angular实现changeFile上传-方法二&quot;&gt;&lt;a href=&quot;#angular实现changeFile上传-方法二&quot; class=&quot;headerlink&quot; title=&quot;angular实现changeFile上传[方法二]&quot;&gt;&lt;/a&gt;angular实现c
    
    </summary>
    
      <category term="angular" scheme="http://wodewone.com/categories/angular/"/>
    
    
      <category term="angular" scheme="http://wodewone.com/tags/angular/"/>
    
      <category term="javascript" scheme="http://wodewone.com/tags/javascript/"/>
    
  </entry>
  
  <entry>
    <title>hexo文章添加图片解决方案</title>
    <link href="http://wodewone.com/2016/08/26/hexo%E6%96%87%E7%AB%A0%E6%B7%BB%E5%8A%A0%E5%9B%BE%E7%89%87%E8%A7%A3%E5%86%B3%E6%96%B9%E6%A1%88/"/>
    <id>http://wodewone.com/2016/08/26/hexo文章添加图片解决方案/</id>
    <published>2016-08-26T10:16:24.000Z</published>
    <updated>2016-12-03T13:47:03.000Z</updated>
    
    <content type="html"><![CDATA[<h4 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h4><p>在 hexo 中完美添加img方法；</p>
<p>如果直接放在项目中的话那么在编辑的时候和发布的时候要改图片路径；</p>
<p>之前一直是使用新浪图床来承载图片，但是觉得每次添加图片都要上传到图床上去，一个是很麻烦，还有一个就是太（lan）不（de）智（bu）能（xing）了，哈哈！于是乎搜了一把，发现了一个比较不错的方法</p>
<h5 id="先手团"><a href="#先手团" class="headerlink" title="先手团"></a>先手团</h5><p><a href="https://github.com/CodeFalling/hexo-asset-image" target="_blank" rel="external">dian这里</a></p>
<p>里面有介绍直接走就可以，或者看后面我的使用方式</p>
<h5 id="使用方式"><a href="#使用方式" class="headerlink" title="使用方式"></a>使用方式</h5><p>安装 <code>hexo-asset-image</code> 之后，<br>在 <code>_config.yml</code> 中搜索 <code>post_asset_folder</code> 这个属性</p>
<p>默认是 <code>false</code> 改为 <code>true</code> 值</p>
<p>这个属性是干啥的呢，实际上在使用命令行敲</p>
<p><code>hexo n &#39;***&#39;</code></p>
<p>新建一篇文章的时候他会默认创建一个同名文件夹来提供容纳该文章里面其他资源比如图片、音频、视频等等</p>
<p>这个时候你只需要这样添加图片即可</p>
<p><code>![logo](demo.jpg)</code></p>
<p>然后在通过 </p>
<p><code>hexo g</code></p>
<p>即可自动生成到 <code>publish</code> 下面</p>
<p>so easy！</p>
]]></content>
    
    <summary type="html">
    
      &lt;h4 id=&quot;前言&quot;&gt;&lt;a href=&quot;#前言&quot; class=&quot;headerlink&quot; title=&quot;前言&quot;&gt;&lt;/a&gt;前言&lt;/h4&gt;&lt;p&gt;在 hexo 中完美添加img方法；&lt;/p&gt;
&lt;p&gt;如果直接放在项目中的话那么在编辑的时候和发布的时候要改图片路径；&lt;/p&gt;
&lt;p&gt;之前一直
    
    </summary>
    
      <category term="hexo" scheme="http://wodewone.com/categories/hexo/"/>
    
    
      <category term="hexo" scheme="http://wodewone.com/tags/hexo/"/>
    
      <category term="img" scheme="http://wodewone.com/tags/img/"/>
    
  </entry>
  
</feed>
